generator client {
  provider        = "prisma-client-js"
  engineType      = "binary"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["fitos"]
}

model Tenant {
  id                       String                     @id @default(cuid())
  name                     String
  subdomain                String?                    @unique
  customDomain             String?                    @unique @map("custom_domain")
  plan                     String                     @default("starter")
  tenantType               String                     @default("business") @map("tenant_type")
  customPlanId             String?                    @map("custom_plan_id")
  planLimits               Json                       @default("{}") @map("plan_limits")
  extraSlots               Json                       @default("{}") @map("extra_slots")
  enabledFeatures          Json                       @default("{}") @map("enabled_features")
  status                   String                     @default("active")
  billingEmail             String                     @map("billing_email")
  stripeCustomerId         String?                    @map("stripe_customer_id")
  stripeSubscriptionId     String?                    @map("stripe_subscription_id")
  settings                 Json                       @default("{}")
  createdAt                DateTime                   @default(now()) @map("created_at")
  updatedAt                DateTime                   @updatedAt @map("updated_at")
  activityLogs             ActivityLog[]
  aiJobs                   AiJob[]
  aiProviders              AiProvider[]
  aiServiceConfigs         AiServiceConfig[]
  aiSessions               AiSession[]
  aiWebhookLogs            AiWebhookLog[]
  appointmentComments      AppointmentComment[]
  appointmentTemplates     AppointmentTemplate[]
  appointments             Appointment[]
  attendances              Attendance[]
  auditLogs                AuditLog[]
  availabilityBlocks       AvailabilityBlock[]
  biometricData            BiometricData[]
  campaigns                Campaign[]
  chatMessages             ChatMessage[]
  churnPredictions         ChurnPrediction[]
  clientGoals              ClientGoal[]
  clientInteractions       ClientInteraction[]
  clientProfiles           ClientProfile[]
  crmTasks                 CRMTask[]
  exercises                Exercise[]
  googleCalendarTokens     GoogleCalendarToken[]
  clients                  Client[]
  notifications            Notification[]
  professionalAvailability ProfessionalAvailability[]
  subscriptions            Subscription[]
  customPlan               PlanConfig?                @relation(fields: [customPlanId], references: [id])
  usageTracking            UsageTracking[]
  users                    User[]
  whatsappConfigs          WhatsAppConfig?
  workouts                 Workout[]
  bioimpedanceMeasurements BioimpedanceMeasurement[]

  // Marketplace relations
  marketplaceListings       MarketplaceListing[]
  marketplaceOrders         MarketplaceOrder[]
  marketplaceSellerProfiles MarketplaceSellerProfile[]

  // Analytics relations
  customerHealthScores CustomerHealthScore[]
  featureUsage         FeatureUsage[]

  @@map("tenants")
  @@schema("fitos")
}

model User {
  id                       String                     @id @default(cuid())
  tenantId                 String?                    @default("default-tenant") @map("tenant_id")
  email                    String                     @unique
  firstName                String?                    @default("Usu√°rio") @map("first_name")
  lastName                 String?                    @default("Sistema") @map("last_name")
  phone                    String?
  role                     String?                    @default("CLIENT")
  status                   String                     @default("ACTIVE")
  profile                  Json                       @default("{}")
  lastLogin                DateTime?                  @map("last_login")
  createdAt                DateTime                   @default(now()) @map("created_at")
  updatedAt                DateTime                   @updatedAt @map("updated_at")
  name                     String?
  emailVerified            Boolean                    @default(false) @map("email_verified")
  image                    String?
  password                 String?
  googleId                 String?                    @unique @map("google_id")
  aiSessions               AiSession[]
  appointmentComments      AppointmentComment[]
  appointmentTemplates     AppointmentTemplate[]
  appointments             Appointment[]              @relation("ProfessionalAppointments")
  auditLogs                AuditLog[]
  availabilityBlocks       AvailabilityBlock[]
  campaigns                Campaign[]
  chatMessages             ChatMessage[]
  clientInteractions       ClientInteraction[]
  clientProfiles           ClientProfile[]
  crmTasks                 CRMTask[]
  googleCalendarTokens     GoogleCalendarToken[]
  assignedClients          ClientTrainer[]
  bioimpedanceMeasurements BioimpedanceMeasurement[]
  client                   Client?
  notifications            Notification[]
  professionalAvailability ProfessionalAvailability[]
  refreshTokens            RefreshToken[]
  sessions                 Session[]
  tenant                   Tenant?                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workouts                 Workout[]

  // Marketplace relations
  sellerListings       MarketplaceListing[]      @relation("SellerListings")
  buyerOrders          MarketplaceOrder[]        @relation("BuyerOrders")
  sellerOrders         MarketplaceOrder[]        @relation("SellerOrders")
  marketplaceReviews   MarketplaceReview[]       @relation("MarketplaceReviews")
  marketplaceQuestions MarketplaceQuestion[]     @relation("MarketplaceQuestions")
  marketplaceFavorites MarketplaceFavorite[]     @relation("MarketplaceFavorites")
  sellerProfile        MarketplaceSellerProfile? @relation("SellerProfile")
  following            MarketplaceFollower[]     @relation("MarketplaceFollowing")

  // Analytics relations
  featureUsage FeatureUsage[]

  @@map("users")
  @@schema("fitos")
}

model Client {
  id                       String                    @id @default(cuid())
  tenantId                 String                    @map("tenant_id")
  userId                   String                    @unique @map("user_id")
  name                     String
  email                    String?
  phone                    String?
  membershipType           String                    @map("membership_type")
  status                   String                    @default("active")
  biometricData            Json                      @default("{}") @map("biometric_data")
  goals                    Json                      @default("{}")
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  activityLogs             ActivityLog[]
  appointments             Appointment[]
  attendance               Attendance[]
  biometricRecords         BiometricData[]
  bioimpedanceMeasurements BioimpedanceMeasurement[]
  churnPredictions         ChurnPrediction[]
  clientGoals              ClientGoal[]
  clientProfile            ClientProfile?
  googleCalendarTokens     GoogleCalendarToken[]
  trainers                 ClientTrainer[]
  tenant                   Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts                 Workout[]

  @@map("clients")
  @@schema("fitos")
}

model Workout {
  id          String    @id @default(cuid())
  tenantId    String    @map("tenant_id")
  clientId    String    @map("client_id")
  userId      String    @map("user_id")
  name        String
  description String?
  exercises   Json      @default("[]")
  aiGenerated Boolean   @default(false) @map("ai_generated")
  completed   Boolean   @default(false)
  completedAt DateTime? @map("completed_at")
  feedback    Json      @default("{}")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workouts")
  @@schema("fitos")
}

model AiSession {
  id        String   @id @default(cuid())
  tenantId  String   @map("tenant_id")
  userId    String   @map("user_id")
  agentType String   @map("agent_type")
  messages  Json     @default("[]")
  context   Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_sessions")
  @@schema("fitos")
}

model BiometricData {
  id         String   @id @default(cuid())
  tenantId   String   @map("tenant_id")
  clientId   String   @map("client_id")
  dataType   String   @map("data_type")
  value      Float
  unit       String
  recordedAt DateTime @map("recorded_at")
  source     String
  createdAt  DateTime @default(now()) @map("created_at")
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("biometric_data")
  @@schema("fitos")
}

model BioimpedanceMeasurement {
  id             String   @id @default(cuid())
  tenantId       String   @map("tenant_id")
  clientId       String   @map("client_id")
  professionalId String?  @map("professional_id")
  measurementId  String?  @map("measurement_id") // ID do dispositivo (ex: 050625-1)
  measuredAt     DateTime @map("measured_at")

  // Dados b√°sicos do usu√°rio
  height Float // Altura em cm
  age    Int // Idade em anos
  gender String // male/female

  // Composi√ß√£o corporal b√°sica
  weight             Float // Peso em kg
  totalBodyWater     Float @map("total_body_water") // √Ågua corporal total em L
  protein            Float // Prote√≠na em kg
  minerals           Float // Minerais em kg
  bodyFatMass        Float @map("body_fat_mass") // Massa de gordura em kg
  skeletalMuscleMass Float @map("skeletal_muscle_mass") // Massa muscular esquel√©tica em kg

  // An√°lise de obesidade
  bmi               Float // IMC
  bodyFatPercentage Float  @map("body_fat_percentage") // PGC - Porcentual de gordura corporal
  waistHipRatio     Float? @map("waist_hip_ratio") // Rela√ß√£o cintura-quadril
  visceralFatLevel  Int?   @map("visceral_fat_level") // N√≠vel de gordura visceral (1-59)

  // Dados adicionais
  fatFreeMass         Float @map("fat_free_mass") // Massa livre de gordura em kg
  basalMetabolicRate  Float @map("basal_metabolic_rate") // TMB em kcal
  obesityDegree       Float @map("obesity_degree") // Grau de obesidade em %
  skeletalMuscleIndex Float @map("skeletal_muscle_index") // SMI em kg/m¬≤
  recommendedCalories Float @map("recommended_calories") // Ingest√£o cal√≥rica recomendada

  // Peso ideal e controles
  idealWeight   Float @map("ideal_weight") // Peso ideal em kg
  weightControl Float @map("weight_control") // Controle de peso em kg
  fatControl    Float @map("fat_control") // Controle de gordura em kg
  muscleControl Float @map("muscle_control") // Controle muscular em kg

  // An√°lise segmentar - Massa magra
  leftArmMuscle  Float @map("left_arm_muscle") // Bra√ßo esquerdo em kg
  rightArmMuscle Float @map("right_arm_muscle") // Bra√ßo direito em kg
  trunkMuscle    Float @map("trunk_muscle") // Tronco em kg
  leftLegMuscle  Float @map("left_leg_muscle") // Perna esquerda em kg
  rightLegMuscle Float @map("right_leg_muscle") // Perna direita em kg

  // An√°lise segmentar - Gordura
  leftArmFat  Float @map("left_arm_fat") // Gordura bra√ßo esquerdo em kg
  rightArmFat Float @map("right_arm_fat") // Gordura bra√ßo direito em kg
  trunkFat    Float @map("trunk_fat") // Gordura tronco em kg
  leftLegFat  Float @map("left_leg_fat") // Gordura perna esquerda em kg
  rightLegFat Float @map("right_leg_fat") // Gordura perna direita em kg

  // Imped√¢ncia bioel√©trica - 20kHz
  impedance20kRightArm Float? @map("impedance_20k_right_arm") // Imped√¢ncia bra√ßo direito 20kHz
  impedance20kLeftArm  Float? @map("impedance_20k_left_arm") // Imped√¢ncia bra√ßo esquerdo 20kHz
  impedance20kTrunk    Float? @map("impedance_20k_trunk") // Imped√¢ncia tronco 20kHz
  impedance20kRightLeg Float? @map("impedance_20k_right_leg") // Imped√¢ncia perna direita 20kHz
  impedance20kLeftLeg  Float? @map("impedance_20k_left_leg") // Imped√¢ncia perna esquerda 20kHz

  // Imped√¢ncia bioel√©trica - 100kHz
  impedance100kRightArm Float? @map("impedance_100k_right_arm") // Imped√¢ncia bra√ßo direito 100kHz
  impedance100kLeftArm  Float? @map("impedance_100k_left_arm") // Imped√¢ncia bra√ßo esquerdo 100kHz
  impedance100kTrunk    Float? @map("impedance_100k_trunk") // Imped√¢ncia tronco 100kHz
  impedance100kRightLeg Float? @map("impedance_100k_right_leg") // Imped√¢ncia perna direita 100kHz
  impedance100kLeftLeg  Float? @map("impedance_100k_left_leg") // Imped√¢ncia perna esquerda 100kHz

  // Classifica√ß√µes e faixas normais
  inbodyScore           Int?    @map("inbody_score") // Pontua√ß√£o InBody (0-100+)
  weightClassification  String? @map("weight_classification") // Normal, Acima, Abaixo
  muscleClassification  String? @map("muscle_classification") // Normal, Acima, Abaixo
  fatClassification     String? @map("fat_classification") // Normal, Acima, Abaixo
  bmiClassification     String? @map("bmi_classification") // Normal, Acima, Abaixo
  bodyFatClassification String? @map("body_fat_classification") // Normal, Acima, Abaixo

  // Faixas normais de refer√™ncia
  normalWeightRange   Json @default("{}") @map("normal_weight_range") // {min, max}
  normalMuscleRange   Json @default("{}") @map("normal_muscle_range") // {min, max}
  normalFatRange      Json @default("{}") @map("normal_fat_range") // {min, max}
  normalBMIRange      Json @default("{}") @map("normal_bmi_range") // {min, max}
  normalBodyFatRange  Json @default("{}") @map("normal_body_fat_range") // {min, max}
  normalWaistHipRange Json @default("{}") @map("normal_waist_hip_range") // {min, max}

  // Dados adicionais
  equipment String? // Equipamento utilizado (ex: InBody270)
  operator  String? // Operador que fez a medi√ß√£o
  notes     String? // Observa√ß√µes adicionais
  qrCode    String? @map("qr_code") // C√≥digo QR do relat√≥rio

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  client       Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant       Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  professional User?  @relation(fields: [professionalId], references: [id])

  @@index([tenantId, clientId, measuredAt])
  @@index([clientId, measuredAt])
  @@map("bioimpedance_measurements")
  @@schema("fitos")
}

model ChurnPrediction {
  id               String   @id @default(cuid())
  tenantId         String   @map("tenant_id")
  clientId         String   @map("client_id")
  churnProbability Float    @map("churn_probability")
  riskFactors      Json     @default("[]") @map("risk_factors")
  suggestedActions Json     @default("[]") @map("suggested_actions")
  predictedAt      DateTime @default(now()) @map("predicted_at")
  createdAt        DateTime @default(now()) @map("created_at")
  client           Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("churn_predictions")
  @@schema("fitos")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@schema("fitos")
}

model ChatMessage {
  id        String   @id @default(cuid())
  tenantId  String   @map("tenant_id")
  userId    String   @map("user_id")
  sessionId String   @map("session_id")
  content   String
  role      String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
  @@schema("fitos")
}

model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String
  displayName   String         @map("display_name")
  description   String?
  price         Float
  currency      String         @default("BRL")
  interval      String
  stripePriceId String?        @map("stripe_price_id")
  mercadoPagoId String?        @map("mercado_pago_id")
  features      Json           @default("[]")
  limits        Json           @default("{}")
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  subscriptions Subscription[]

  @@map("subscription_plans")
  @@schema("fitos")
}

model Subscription {
  id                   String           @id @default(cuid())
  tenantId             String           @map("tenant_id")
  planId               String           @map("plan_id")
  status               String
  currentPeriodStart   DateTime         @map("current_period_start")
  currentPeriodEnd     DateTime         @map("current_period_end")
  cancelAtPeriodEnd    Boolean          @default(false) @map("cancel_at_period_end")
  cancelledAt          DateTime?        @map("cancelled_at")
  stripeSubscriptionId String?          @map("stripe_subscription_id")
  mercadoPagoId        String?          @map("mercado_pago_id")
  paymentMethod        String?          @map("payment_method")
  metadata             Json             @default("{}")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  invoices             Invoice[]
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])
  tenant               Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
  @@schema("fitos")
}

model Invoice {
  id              String       @id @default(cuid())
  subscriptionId  String       @map("subscription_id")
  amount          Float
  currency        String       @default("BRL")
  status          String
  stripeInvoiceId String?      @map("stripe_invoice_id")
  mercadoPagoId   String?      @map("mercado_pago_id")
  paymentIntentId String?      @map("payment_intent_id")
  paidAt          DateTime?    @map("paid_at")
  dueDate         DateTime     @map("due_date")
  metadata        Json         @default("{}")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("invoices")
  @@schema("fitos")
}

model PlanConfig {
  id             String   @id @default(cuid())
  plan           String
  displayName    String   @map("display_name")
  tenantType     String   @map("tenant_type")
  tenantId       String?  @map("tenant_id")
  isCustom       Boolean  @default(false) @map("is_custom")
  limits         Json     @default("{}")
  price          Float
  extraSlotPrice Json     @default("{}") @map("extra_slot_price")
  features       Json     @default("{}")
  contractTerms  String?  @map("contract_terms")
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  createdBy      String?  @map("created_by")
  tenants        Tenant[]

  @@unique([plan, tenantId])
  @@map("plan_configs")
  @@schema("fitos")
}

model PaymentWebhook {
  id          String    @id @default(cuid())
  provider    String
  eventType   String    @map("event_type")
  eventId     String    @map("event_id")
  payload     Json
  processed   Boolean   @default(false)
  processedAt DateTime? @map("processed_at")
  error       String?
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([provider, eventId])
  @@map("payment_webhooks")
  @@schema("fitos")
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("fitos")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("verification")
  @@schema("fitos")
}

model Exercise {
  id           String   @id @default(cuid())
  tenantId     String   @map("tenant_id")
  name         String
  description  String?
  category     String
  muscleGroups Json     @default("[]")
  equipment    String?
  difficulty   String   @default("intermediate")
  instructions Json     @default("[]")
  videoUrl     String?  @map("video_url")
  thumbnailUrl String?  @map("thumbnail_url")
  isPublic     Boolean  @default(true) @map("is_public")
  createdBy    String?  @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("exercises")
  @@schema("fitos")
}

model UsageTracking {
  id        String   @id @default(cuid())
  tenantId  String   @map("tenant_id")
  eventType String   @map("event_type")
  eventData Json     @default("{}")
  userId    String?  @map("user_id")
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, eventType, createdAt])
  @@map("usage_tracking")
  @@schema("fitos")
}

model ActivityLog {
  id           String   @id @default(cuid())
  tenantId     String   @map("tenant_id")
  clientId     String?  @map("client_id")
  userId       String?  @map("user_id")
  activityType String   @map("activity_type")
  description  String
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")
  client       Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, clientId, createdAt])
  @@index([tenantId, activityType, createdAt])
  @@map("activity_logs")
  @@schema("fitos")
}

model ClientTrainer {
  id         String   @id @default(cuid())
  clientId   String   @map("client_id")
  trainerId  String   @map("trainer_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String?  @map("assigned_by")
  isActive   Boolean  @default(true) @map("is_active")
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  trainer    User     @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@unique([clientId, trainerId])
  @@map("client_trainers")
  @@schema("fitos")
}

model AiProvider {
  id             String            @id @default(cuid())
  name           String            @unique
  displayName    String
  provider       AiProviderType
  tenantId       String?           @map("tenant_id")
  apiKey         String?
  webhookUrl     String?
  webhookSecret  String?
  baseUrl        String?
  models         Json              @default("[]")
  isActive       Boolean           @default(true)
  isDefault      Boolean           @default(false)
  timeout        Int               @default(30000)
  maxRetries     Int               @default(3)
  isAsync        Boolean           @default(false)
  callbackUrl    String?
  config         Json              @default("{}")
  headers        Json?
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  createdBy      String            @map("created_by")
  tenant         Tenant?           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceConfigs AiServiceConfig[]
  webhookLogs    AiWebhookLog[]

  @@map("ai_providers")
  @@schema("fitos")
}

model AiServiceConfig {
  id                   String        @id @default(cuid())
  serviceType          AiServiceType
  serviceName          String?
  providerId           String        @map("provider_id")
  tenantId             String?       @map("tenant_id")
  model                String
  priority             Int           @default(0)
  isActive             Boolean       @default(true)
  config               Json          @default("{}")
  maxRequestsPerMinute Int?          @map("max_requests_per_minute")
  costPerRequest       Float?        @default(0) @map("cost_per_request")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")
  provider             AiProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  tenant               Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([serviceType, providerId, serviceName])
  @@map("ai_service_configs")
  @@schema("fitos")
}

model AiCostTracking {
  id           String    @id @default(cuid())
  clientId     String    @map("client_id")
  model        String
  provider     String
  inputTokens  Int       @map("input_tokens")
  outputTokens Int       @map("output_tokens")
  cost         Float
  currency     String    @default("USD")
  isCacheHit   Boolean   @default(false) @map("is_cache_hit")
  metadata     Json      @default("{}")
  timestamp    DateTime  @default(now())
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@index([clientId])
  @@index([timestamp])
  @@index([provider])
  @@index([model])
  @@map("ai_cost_tracking")
  @@schema("fitos")
}

model ClientCostLimit {
  id           String    @id @default(cuid())
  clientId     String    @unique @map("client_id")
  monthlyLimit Float     @map("monthly_limit")
  currency     String    @default("USD")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("client_cost_limits")
  @@schema("fitos")
}

model CostAlert {
  id           String    @id @default(cuid())
  clientId     String?   @map("client_id")
  budgetId     String?
  alertType    String    @map("alert_type") // WARNING, CRITICAL, LIMIT_REACHED
  currentCost  Float     @map("current_cost")
  limit        Float
  percentage   Float
  message      String
  severity     String    @default("warning")
  isActive     Boolean   @default(true) @map("is_active")
  
  acknowledgedAt DateTime?
  acknowledgedBy String?
  resolvedAt     DateTime?
  
  budget       CostBudget? @relation(fields: [budgetId], references: [id])
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@index([clientId])
  @@index([isActive])
  @@index([alertType])
  @@index([budgetId])
  @@map("cost_alerts")
  @@schema("fitos")
}

model AiWebhookLog {
  id              String     @id @default(cuid())
  providerId      String     @map("provider_id")
  tenantId        String?    @map("tenant_id")
  direction       String
  requestUrl      String?    @map("request_url")
  requestMethod   String?    @map("request_method")
  requestHeaders  Json?      @map("request_headers")
  requestBody     Json?      @map("request_body")
  responseStatus  Int?       @map("response_status")
  responseHeaders Json?      @map("response_headers")
  responseBody    Json?      @map("response_body")
  duration        Int?
  error           String?
  jobId           String?    @map("job_id")
  createdAt       DateTime   @default(now()) @map("created_at")
  provider        AiProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  tenant          Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([providerId, createdAt])
  @@index([jobId])
  @@map("ai_webhook_logs")
  @@schema("fitos")
}

model AiJob {
  id          String    @id @default(cuid())
  serviceType String    @map("service_type")
  providerId  String    @map("provider_id")
  tenantId    String?   @map("tenant_id")
  status      String
  input       Json
  output      Json?
  error       String?
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  attempts    Int       @default(0)
  userId      String?   @map("user_id")
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  tenant      Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@index([userId])
  @@map("ai_jobs")
  @@schema("fitos")
}

model Appointment {
  id                   String                @id @default(cuid())
  tenantId             String                @map("tenant_id")
  professionalId       String                @map("professional_id")
  clientId             String                @map("client_id")
  title                String
  description          String?
  scheduledAt          DateTime              @map("scheduled_at")
  duration             Int                   @default(60)
  status               String                @default("scheduled")
  location             String?
  isVirtual            Boolean               @default(false) @map("is_virtual")
  googleEventId        String?               @map("google_event_id")
  googleCalendarSynced Boolean               @default(false) @map("google_calendar_synced")
  notes                String?
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  comments             AppointmentComment[]
  reminders            AppointmentReminder[]
  review               AppointmentReview?
  client               Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  professional         User                  @relation("ProfessionalAppointments", fields: [professionalId], references: [id])
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  attendance           Attendance?

  @@index([tenantId, professionalId, scheduledAt])
  @@index([tenantId, clientId, scheduledAt])
  @@map("appointments")
  @@schema("fitos")
}

model GoogleCalendarToken {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  tenantId     String   @map("tenant_id")
  clientId     String?  @map("client_id")
  accessToken  String   @map("access_token")
  refreshToken String?  @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  scope        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  client       Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("google_calendar_tokens")
  @@schema("fitos")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tenantId  String   @map("tenant_id")
  type      String
  title     String
  message   String
  data      Json     @default("{}")
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt])
  @@map("notifications")
  @@schema("fitos")
}

model AppointmentReminder {
  id            String      @id @default(cuid())
  appointmentId String      @map("appointment_id")
  type          String
  status        String      @default("pending")
  scheduledFor  DateTime    @map("scheduled_for")
  sentAt        DateTime?   @map("sent_at")
  createdAt     DateTime    @default(now()) @map("created_at")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([status, scheduledFor])
  @@map("appointment_reminders")
  @@schema("fitos")
}

model AppointmentTemplate {
  id             String   @id @default(cuid())
  tenantId       String   @map("tenant_id")
  professionalId String   @map("professional_id")
  name           String
  type           String
  duration       Int      @default(60)
  description    String?
  location       String?
  isVirtual      Boolean  @default(false) @map("is_virtual")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  professional   User     @relation(fields: [professionalId], references: [id])
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, professionalId])
  @@map("appointment_templates")
  @@schema("fitos")
}

model ProfessionalAvailability {
  id             String   @id @default(cuid())
  tenantId       String   @map("tenant_id")
  professionalId String   @map("professional_id")
  dayOfWeek      Int      @map("day_of_week")
  startTime      String   @map("start_time")
  endTime        String   @map("end_time")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  professional   User     @relation(fields: [professionalId], references: [id])
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, professionalId, dayOfWeek])
  @@map("professional_availability")
  @@schema("fitos")
}

model AvailabilityBlock {
  id             String   @id @default(cuid())
  tenantId       String   @map("tenant_id")
  professionalId String   @map("professional_id")
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  reason         String?
  createdAt      DateTime @default(now()) @map("created_at")
  professional   User     @relation(fields: [professionalId], references: [id])
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, professionalId, startDate])
  @@map("availability_blocks")
  @@schema("fitos")
}

model AppointmentComment {
  id            String      @id @default(cuid())
  appointmentId String      @map("appointment_id")
  userId        String      @map("user_id")
  tenantId      String      @map("tenant_id")
  content       String
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])

  @@index([appointmentId, createdAt])
  @@map("appointment_comments")
  @@schema("fitos")
}

model AppointmentReview {
  id            String      @id @default(cuid())
  appointmentId String      @unique @map("appointment_id")
  rating        Int
  comment       String?
  createdAt     DateTime    @default(now()) @map("created_at")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("appointment_reviews")
  @@schema("fitos")
}

model AuditLog {
  id         String   @id @default(cuid())
  tenantId   String   @map("tenant_id")
  userId     String   @map("user_id")
  action     String
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  changes    Json     @default("{}")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([tenantId, entityType, createdAt])
  @@index([userId, createdAt])
  @@map("audit_logs")
  @@schema("fitos")
}

model WhatsAppConfig {
  id          String   @id @default(cuid())
  tenantId    String   @unique @map("tenant_id")
  provider    String
  phoneNumber String   @map("phone_number")
  apiKey      String   @map("api_key")
  apiSecret   String   @map("api_secret")
  webhookUrl  String?  @map("webhook_url")
  isActive    Boolean  @default(false) @map("is_active")
  settings    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("whatsapp_configs")
  @@schema("fitos")
}

model Attendance {
  id            String      @id @default(cuid())
  appointmentId String      @unique @map("appointment_id")
  clientId      String      @map("client_id")
  tenantId      String      @map("tenant_id")
  checkInAt     DateTime?   @map("check_in_at")
  checkOutAt    DateTime?   @map("check_out_at")
  status        String      @default("scheduled")
  createdAt     DateTime    @default(now()) @map("created_at")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, clientId, createdAt])
  @@map("attendances")
  @@schema("fitos")
}

model ClientGoal {
  id          String    @id @default(cuid())
  clientId    String    @map("client_id")
  tenantId    String    @map("tenant_id")
  title       String
  description String?
  type        String
  target      Float
  current     Float
  unit        String
  startDate   DateTime  @map("start_date")
  targetDate  DateTime  @map("target_date")
  status      String    @default("active")
  achievedAt  DateTime? @map("achieved_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, clientId, status])
  @@map("client_goals")
  @@schema("fitos")
}

model ClientProfile {
  id                String              @id @default(cuid())
  tenantId          String              @map("tenant_id")
  clientId          String              @unique @map("client_id")
  professionalId    String              @map("professional_id")
  status            String              @default("prospect")
  source            String?
  notes             String?
  lastInteractionAt DateTime?           @map("last_interaction_at")
  totalSpent        Float               @default(0) @map("total_spent")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  interactions      ClientInteraction[]
  client            Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  professional      User                @relation(fields: [professionalId], references: [id])
  tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  crmTasks          CRMTask[]

  @@index([tenantId, professionalId, status])
  @@map("client_profiles")
  @@schema("fitos")
}

model ClientInteraction {
  id              String        @id @default(cuid())
  tenantId        String        @map("tenant_id")
  clientProfileId String        @map("client_profile_id")
  professionalId  String        @map("professional_id")
  type            String
  subject         String
  description     String?
  outcome         String?
  scheduledFor    DateTime?     @map("scheduled_for")
  completedAt     DateTime?     @map("completed_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  clientProfile   ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  professional    User          @relation(fields: [professionalId], references: [id])
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, professionalId, createdAt])
  @@index([clientProfileId, createdAt])
  @@map("client_interactions")
  @@schema("fitos")
}

model CRMTask {
  id              String         @id @default(cuid())
  tenantId        String         @map("tenant_id")
  clientProfileId String?        @map("client_profile_id")
  professionalId  String         @map("professional_id")
  title           String
  description     String?
  type            String
  priority        String         @default("medium")
  status          String         @default("pending")
  dueDate         DateTime?      @map("due_date")
  completedAt     DateTime?      @map("completed_at")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  clientProfile   ClientProfile? @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  professional    User           @relation(fields: [professionalId], references: [id])
  tenant          Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, professionalId, status, dueDate])
  @@index([clientProfileId, status])
  @@map("crm_tasks")
  @@schema("fitos")
}

model Campaign {
  id             String    @id @default(cuid())
  tenantId       String    @map("tenant_id")
  professionalId String    @map("professional_id")
  name           String
  description    String?
  type           String
  status         String    @default("draft")
  targetAudience Json      @default("{}") @map("target_audience")
  content        Json      @default("{}")
  scheduledFor   DateTime? @map("scheduled_for")
  startedAt      DateTime? @map("started_at")
  completedAt    DateTime? @map("completed_at")
  metrics        Json      @default("{}")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  professional   User      @relation(fields: [professionalId], references: [id])
  tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, professionalId, status])
  @@map("campaigns")
  @@schema("fitos")
}

enum AiProviderType {
  OPENAI
  GEMINI
  GROQ
  OLLAMA
  CLAUDE
  MISTRAL
  COHERE
  HUGGINGFACE
  DEEPSEEK
  CUSTOM_API
  N8N_WEBHOOK
  CUSTOM_WEBHOOK

  @@schema("fitos")
}

enum AiServiceType {
  CHAT
  MULTIAGENT_CHAT
  VOICE_WORKOUT_COACH
  VIRTUAL_WORKOUT_BUDDY
  FORM_FILLING_ASSISTANT
  IMAGE_ANALYSIS
  VIDEO_ANALYSIS
  POSTURE_ANALYSIS
  EXERCISE_FORM_CHECKER
  BODY_COMPOSITION_PREDICTOR
  NUTRITION_LABEL_SCANNER
  TRANSCRIPTION
  TEXT_TO_SPEECH
  WORKOUT
  SMART_WARMUP_GENERATOR
  AUTO_SUBSTITUTE_EXERCISES
  WORKOUT_DIFFICULTY_ADJUSTER
  RECOVERY_OPTIMIZER
  INJURY_PREDICTION
  NUTRITION
  MEAL_PLAN_GENERATION
  SUPPLEMENT_RECOMMENDATION
  MEDICAL_OCR
  SENTIMENT_ANALYSIS
  MOTIVATION_DETECTION
  MENTAL_HEALTH_MONITOR
  ANALYTICS
  CHURN
  REVENUE_PREDICTION
  MARKET_INTELLIGENCE
  COMPETITOR_WORKOUT_DETECTOR
  MEMBERSHIP_UPSELL_ASSISTANT
  CONTENT_GENERATION
  AUTOMATIC_PROGRESS_REPORTS
  VIDEO_GENERATION
  PLAYLIST_GENERATION
  SCHEDULING_ASSISTANT
  EMBEDDINGS
  RAG_COACH
  RAG_NUTRITION
  RAG_MEDICAL
  CUSTOM

  @@schema("fitos")
}

model IntegrationConfig {
  id               String    @id @default(cuid())
  integration      String    @unique
  displayName      String
  description      String?
  category         String // 'ai', 'payment', 'communication', 'storage', 'calendar', 'automation', 'wearables', 'analytics', 'backend', 'location'
  icon             String?
  environment      String    @default("production")
  config           Json // Configura√ß√µes criptografadas
  metadata         Json      @default("{}") // Campos din√¢micos baseados na doc
  isActive         Boolean   @default(false)
  isConfigured     Boolean   @default(false)
  lastTested       DateTime?
  lastTestStatus   String?
  lastTestMessage  String?
  sdkVersion       String?
  documentationUrl String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String

  usageLogs IntegrationUsageLog[]

  @@map("integration_configs")
  @@schema("fitos")
}

model IntegrationUsageLog {
  id            String   @id @default(cuid())
  integrationId String
  eventType     String // 'api_call', 'webhook', 'test', 'error'
  requestCount  Int      @default(1)
  tokensUsed    Int?
  cost          Float?
  status        String // 'success', 'failure', 'warning'
  metadata      Json     @default("{}")
  timestamp     DateTime @default(now())

  integration IntegrationConfig @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("integration_usage_logs")
  @@schema("fitos")
}

model IntegrationTemplate {
  id               String   @id @default(cuid())
  integration      String   @unique
  displayName      String
  category         String
  icon             String?
  configSchema     Json // JSON Schema para valida√ß√£o
  requiredFields   Json // Lista de campos obrigat√≥rios
  optionalFields   Json // Lista de campos opcionais
  testEndpoint     String? // Endpoint para testar conex√£o
  documentationUrl String
  sdkPackage       String? // Nome do pacote npm
  sdkVersion       String?
  exampleConfig    Json? // Exemplo de configura√ß√£o
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("integration_templates")
  @@schema("fitos")
}

model GlobalLimitsConfig {
  id            String   @id @default(cuid())
  plan          String   @unique
  aiLimits      Json
  uploadLimits  Json
  featureLimits Json
  rateLimits    Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("global_limits_configs")
  @@schema("fitos")
}

model TenantLimitOverride {
  id        String   @id @default(cuid())
  tenantId  String   @unique
  plan      String
  overrides Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenant_limit_overrides")
  @@schema("fitos")
}

// ==================== MARKETPLACE MODELS ====================

model MarketplaceCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  icon        String?
  parentId    String?  @map("parent_id")
  order       Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  parent   MarketplaceCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children MarketplaceCategory[] @relation("CategoryHierarchy")
  listings MarketplaceListing[]

  @@map("marketplace_categories")
  @@schema("fitos")
}

model MarketplaceListing {
  id         String @id @default(cuid())
  tenantId   String @map("tenant_id")
  sellerId   String @map("seller_id")
  categoryId String @map("category_id")

  title            String
  slug             String
  description      String
  shortDescription String? @map("short_description")

  type           String // 'physical', 'digital', 'service'
  price          Float
  compareAtPrice Float? @map("compare_at_price")
  currency       String @default("BRL")

  // Estoque (para produtos f√≠sicos)
  stockQuantity  Int?    @default(0) @map("stock_quantity")
  lowStockAlert  Int?    @default(5) @map("low_stock_alert")
  allowBackorder Boolean @default(false) @map("allow_backorder")

  // M√≠dia
  images       Json    @default("[]")
  videos       Json    @default("[]")
  thumbnailUrl String? @map("thumbnail_url")

  // SEO & Marketing
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description")
  tags            Json    @default("[]")

  // Status e Aprova√ß√£o
  status          String    @default("draft") // draft, pending_approval, approved, rejected, paused, sold_out
  approvalStatus  String    @default("pending") @map("approval_status")
  rejectionReason String?   @map("rejection_reason")
  approvedAt      DateTime? @map("approved_at")
  approvedBy      String?   @map("approved_by")

  // M√©tricas
  viewCount     Int @default(0) @map("view_count")
  favoriteCount Int @default(0) @map("favorite_count")
  shareCount    Int @default(0) @map("share_count")
  salesCount    Int @default(0) @map("sales_count")

  // Destaque & Boost
  isFeatured    Boolean   @default(false) @map("is_featured")
  isBoosted     Boolean   @default(false) @map("is_boosted")
  boostedUntil  DateTime? @map("boosted_until")
  featuredUntil DateTime? @map("featured_until")

  // Configura√ß√µes
  enableReviews    Boolean @default(true) @map("enable_reviews")
  enableQuestions  Boolean @default(true) @map("enable_questions")
  shippingRequired Boolean @default(false) @map("shipping_required")
  shippingOptions  Json    @default("[]") @map("shipping_options")

  // Datas
  publishedAt DateTime? @map("published_at")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant   Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  seller   User                @relation("SellerListings", fields: [sellerId], references: [id])
  category MarketplaceCategory @relation(fields: [categoryId], references: [id])

  orders     MarketplaceOrder[]
  reviews    MarketplaceReview[]
  questions  MarketplaceQuestion[]
  favorites  MarketplaceFavorite[]
  analytics  MarketplaceAnalytics[]
  variations MarketplaceVariation[]

  @@index([tenantId, status, publishedAt])
  @@index([sellerId, status])
  @@index([categoryId, status])
  @@index([slug])
  @@map("marketplace_listings")
  @@schema("fitos")
}

model MarketplaceVariation {
  id        String   @id @default(cuid())
  listingId String   @map("listing_id")
  name      String // ex: "Tamanho: M", "Cor: Azul"
  sku       String?
  price     Float?
  stock     Int      @default(0)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  listing MarketplaceListing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("marketplace_variations")
  @@schema("fitos")
}

model MarketplaceOrder {
  id        String @id @default(cuid())
  tenantId  String @map("tenant_id")
  listingId String @map("listing_id")
  buyerId   String @map("buyer_id")
  sellerId  String @map("seller_id")

  orderNumber String @unique @map("order_number")

  // Valores
  subtotal             Float
  shippingCost         Float  @default(0) @map("shipping_cost")
  discount             Float  @default(0)
  marketplaceComission Float  @map("marketplace_comission")
  listingFee           Float  @default(0) @map("listing_fee")
  totalAmount          Float  @map("total_amount")
  sellerAmount         Float  @map("seller_amount")
  currency             String @default("BRL")

  // Status
  status            String  @default("pending") // pending, processing, completed, cancelled, refunded, disputed
  paymentStatus     String  @default("pending") @map("payment_status") // pending, paid, failed, refunded
  fulfillmentStatus String? @map("fulfillment_status") // pending, shipped, delivered, pickup_ready

  // Pagamento
  paymentMethod   String? @map("payment_method")
  paymentProvider String? @map("payment_provider") // stripe, mercadopago
  paymentIntentId String? @map("payment_intent_id")
  transferId      String? @map("transfer_id")

  // Entrega
  shippingAddress Json?     @map("shipping_address")
  trackingCode    String?   @map("tracking_code")
  shippedAt       DateTime? @map("shipped_at")
  deliveredAt     DateTime? @map("delivered_at")

  // Escrow
  escrowStatus     String    @default("held") @map("escrow_status") // held, released, refunded
  escrowReleasedAt DateTime? @map("escrow_released_at")

  // Metadata
  metadata    Json    @default("{}")
  buyerNotes  String? @map("buyer_notes")
  sellerNotes String? @map("seller_notes")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tenant  Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  listing MarketplaceListing @relation(fields: [listingId], references: [id])
  buyer   User               @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller  User               @relation("SellerOrders", fields: [sellerId], references: [id])

  dispute  MarketplaceDispute?
  shipment MarketplaceShipment?

  @@index([tenantId, buyerId, createdAt])
  @@index([sellerId, status])
  @@index([orderNumber])
  @@map("marketplace_orders")
  @@schema("fitos")
}

model MarketplaceReview {
  id         String  @id @default(cuid())
  listingId  String  @map("listing_id")
  orderId    String? @map("order_id")
  reviewerId String  @map("reviewer_id")

  rating  Int // 1-5
  title   String?
  comment String?
  images  Json    @default("[]")

  isVerified Boolean @default(false) @map("is_verified") // compra verificada
  isVisible  Boolean @default(true) @map("is_visible")

  helpfulCount Int @default(0) @map("helpful_count")

  sellerResponse    String?   @map("seller_response")
  sellerRespondedAt DateTime? @map("seller_responded_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  listing  MarketplaceListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reviewer User               @relation("MarketplaceReviews", fields: [reviewerId], references: [id])

  @@index([listingId, isVisible])
  @@map("marketplace_reviews")
  @@schema("fitos")
}

model MarketplaceQuestion {
  id        String @id @default(cuid())
  listingId String @map("listing_id")
  askerId   String @map("asker_id")

  question   String
  answer     String?
  answeredAt DateTime? @map("answered_at")

  isVisible Boolean @default(true) @map("is_visible")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  listing MarketplaceListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  asker   User               @relation("MarketplaceQuestions", fields: [askerId], references: [id])

  @@index([listingId, isVisible])
  @@map("marketplace_questions")
  @@schema("fitos")
}

model MarketplaceFavorite {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  listingId String   @map("listing_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User               @relation("MarketplaceFavorites", fields: [userId], references: [id], onDelete: Cascade)
  listing MarketplaceListing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([userId])
  @@map("marketplace_favorites")
  @@schema("fitos")
}

model MarketplaceAnalytics {
  id        String   @id @default(cuid())
  listingId String   @map("listing_id")
  date      DateTime

  views     Int   @default(0)
  favorites Int   @default(0)
  shares    Int   @default(0)
  questions Int   @default(0)
  orders    Int   @default(0)
  revenue   Float @default(0)

  listing MarketplaceListing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, date])
  @@map("marketplace_analytics")
  @@schema("fitos")
}

model MarketplaceSellerProfile {
  id       String @id @default(cuid())
  userId   String @unique @map("user_id")
  tenantId String @map("tenant_id")

  displayName String  @map("display_name")
  bio         String?
  logo        String?
  coverImage  String? @map("cover_image")

  // Verifica√ß√£o
  isVerified Boolean   @default(false) @map("is_verified")
  verifiedAt DateTime? @map("verified_at")
  badges     Json      @default("[]")

  // M√©tricas
  totalSales    Int   @default(0) @map("total_sales")
  totalRevenue  Float @default(0) @map("total_revenue")
  averageRating Float @default(0) @map("average_rating")
  responseTime  Int?  @map("response_time") // em minutos

  // Configura√ß√µes
  autoApprove       Boolean @default(false) @map("auto_approve")
  notifyNewOrder    Boolean @default(true) @map("notify_new_order")
  notifyNewQuestion Boolean @default(true) @map("notify_new_question")

  // Comiss√µes e taxas
  commissionRate   Float   @default(10) @map("commission_rate") // porcentagem
  customCommission Boolean @default(false) @map("custom_commission")

  // Seguidor
  followerCount Int @default(0) @map("follower_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation("SellerProfile", fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  followers MarketplaceFollower[]
  credits   MarketplaceCredit[]
  kyc       MarketplaceSellerKYC?

  @@map("marketplace_seller_profiles")
  @@schema("fitos")
}

model MarketplaceFollower {
  id         String   @id @default(cuid())
  sellerId   String   @map("seller_id")
  followerId String   @map("follower_id")
  createdAt  DateTime @default(now()) @map("created_at")

  seller   MarketplaceSellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  follower User                     @relation("MarketplaceFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, followerId])
  @@map("marketplace_followers")
  @@schema("fitos")
}

model MarketplaceCredit {
  id       String @id @default(cuid())
  sellerId String @map("seller_id")

  amount      Int // quantidade de cr√©ditos
  type        String // 'purchase', 'reward', 'refund', 'usage'
  description String

  listingId String? @map("listing_id")
  orderId   String? @map("order_id")

  createdAt DateTime @default(now()) @map("created_at")

  seller MarketplaceSellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId, createdAt])
  @@map("marketplace_credits")
  @@schema("fitos")
}

model MarketplaceBoost {
  id        String @id @default(cuid())
  listingId String @map("listing_id")
  sellerId  String @map("seller_id")

  duration Int // em dias
  price    Float
  status   String @default("active") // active, expired, cancelled

  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")

  impressions Int @default(0)
  clicks      Int @default(0)

  createdAt DateTime @default(now()) @map("created_at")

  @@index([listingId, status])
  @@map("marketplace_boosts")
  @@schema("fitos")
}

model MarketplaceCoupon {
  id       String @id @default(cuid())
  sellerId String @map("seller_id")

  code        String  @unique
  description String?

  discountType  String // 'percentage', 'fixed'
  discountValue Float  @map("discount_value")

  minPurchase Float? @map("min_purchase")
  maxDiscount Float? @map("max_discount")

  usageLimit Int? @map("usage_limit")
  usageCount Int  @default(0) @map("usage_count")

  validFrom  DateTime @map("valid_from")
  validUntil DateTime @map("valid_until")

  isActive Boolean @default(true) @map("is_active")

  applicableListings Json @default("[]") @map("applicable_listings") // array de listing IDs

  createdAt DateTime @default(now()) @map("created_at")

  @@map("marketplace_coupons")
  @@schema("fitos")
}

model MarketplaceDispute {
  id      String @id @default(cuid())
  orderId String @unique @map("order_id")

  reason      String
  description String
  evidence    Json   @default("[]")

  status     String  @default("open") // open, in_review, resolved, closed
  resolution String?

  openedBy   String    @map("opened_by") // buyer or seller user id
  resolvedBy String?   @map("resolved_by") // admin user id
  resolvedAt DateTime? @map("resolved_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order MarketplaceOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("marketplace_disputes")
  @@schema("fitos")
}

model MarketplaceContentFilter {
  id        String   @id @default(cuid())
  type      String // 'forbidden', 'flagged', 'allowed'
  word      String
  severity  String   @default("medium") // low, medium, high
  category  String? // offensive, spam, inappropriate
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([word, type])
  @@map("marketplace_content_filters")
  @@schema("fitos")
}

model MarketplaceFidelityProgram {
  id     String @id @default(cuid())
  userId String @map("user_id")

  points Int    @default(0)
  tier   String @default("bronze") // bronze, silver, gold, platinum

  totalSpent  Float @default(0) @map("total_spent")
  totalOrders Int   @default(0) @map("total_orders")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  transactions MarketplaceFidelityTransaction[]

  @@unique([userId])
  @@map("marketplace_fidelity_programs")
  @@schema("fitos")
}

model MarketplaceFidelityTransaction {
  id        String @id @default(cuid())
  programId String @map("program_id")

  points      Int
  type        String // 'earned', 'redeemed', 'expired'
  description String

  orderId String? @map("order_id")

  createdAt DateTime @default(now()) @map("created_at")

  program MarketplaceFidelityProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId, createdAt])
  @@map("marketplace_fidelity_transactions")
  @@schema("fitos")
}

model MarketplaceAffiliate {
  id     String @id @default(cuid())
  userId String @map("user_id")

  code           String @unique
  commissionRate Float  @default(5) @map("commission_rate") // porcentagem

  totalClicks     Int   @default(0) @map("total_clicks")
  totalSales      Int   @default(0) @map("total_sales")
  totalCommission Float @default(0) @map("total_commission")

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("marketplace_affiliates")
  @@schema("fitos")
}

model MarketplaceEvent {
  id          String @id @default(cuid())
  organizerId String @map("organizer_id")

  title       String
  description String
  type        String // workshop, seminar, competition, class

  date        DateTime
  duration    Int // em minutos
  location    String?
  isVirtual   Boolean  @default(false) @map("is_virtual")
  meetingLink String?  @map("meeting_link")

  price            Float
  maxAttendees     Int?  @map("max_attendees")
  currentAttendees Int   @default(0) @map("current_attendees")

  image  String?
  status String  @default("active") // active, cancelled, completed, sold_out

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("marketplace_events")
  @@schema("fitos")
}

model MarketplaceSpaceRental {
  id      String @id @default(cuid())
  ownerId String @map("owner_id")

  name        String
  description String
  images      Json   @default("[]")

  location String
  address  Json

  type      String // studio, gym, classroom, outdoor
  capacity  Int?
  amenities Json   @default("[]")

  pricePerHour Float @map("price_per_hour")
  minHours     Int   @default(1) @map("min_hours")

  availability Json @default("[]")

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("marketplace_space_rentals")
  @@schema("fitos")
}

model MarketplaceJob {
  id         String @id @default(cuid())
  employerId String @map("employer_id")

  title       String
  description String
  type        String // full_time, part_time, freelance, internship

  location String?
  isRemote Boolean @default(false) @map("is_remote")

  salaryMin Float? @map("salary_min")
  salaryMax Float? @map("salary_max")
  benefits  Json   @default("[]")

  requirements String

  status String @default("active") // active, closed, filled

  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("marketplace_jobs")
  @@schema("fitos")
}

// KYC Models
model MarketplaceSellerKYC {
  id       String @id @default(cuid())
  sellerId String @unique @map("seller_id")

  // Status
  status     String @default("pending") // pending, in_review, approved, rejected, expired
  trustScore Int    @default(0) @map("trust_score") // 0-100

  // Tipo de vendedor
  sellerType String @map("seller_type") // individual, business

  // Documentos Pessoa F√≠sica
  cpf              String? @unique
  cpfValid         Boolean @default(false) @map("cpf_valid")
  rgNumber         String? @map("rg_number")
  cnhNumber        String? @map("cnh_number")
  documentFrontUrl String? @map("document_front_url")
  documentBackUrl  String? @map("document_back_url")
  documentVerified Boolean @default(false) @map("document_verified")

  // Documentos Pessoa Jur√≠dica
  cnpj        String? @unique
  cnpjValid   Boolean @default(false) @map("cnpj_valid")
  companyName String? @map("company_name")
  contractUrl String? @map("contract_url")

  // Verifica√ß√£o Facial
  selfieUrl      String? @map("selfie_url")
  faceMatchScore Float?  @map("face_match_score") // 0-100
  faceVerified   Boolean @default(false) @map("face_verified")
  livenessCheck  Boolean @default(false) @map("liveness_check")

  // Endere√ßo
  addressProofUrl String? @map("address_proof_url")
  addressVerified Boolean @default(false) @map("address_verified")
  addressStreet   String? @map("address_street")
  addressNumber   String? @map("address_number")
  addressCity     String? @map("address_city")
  addressState    String? @map("address_state")
  addressZipCode  String? @map("address_zip_code")

  // Dados Banc√°rios
  bankName          String? @map("bank_name")
  bankAccountNumber String? @map("bank_account_number")
  bankAccountType   String? @map("bank_account_type") // checking, savings
  bankProofUrl      String? @map("bank_proof_url")
  bankVerified      Boolean @default(false) @map("bank_verified")
  pixKey            String? @map("pix_key")

  // Background Checks
  criminalRecordCheck Boolean  @default(false) @map("criminal_record_check")
  criminalRecordClean Boolean? @map("criminal_record_clean")
  creditScoreCheck    Boolean  @default(false) @map("credit_score_check")
  creditScore         Int?     @map("credit_score")

  // Integra√ß√µes Externas
  verificationProvider  String? @map("verification_provider") // stripe_identity, idwall, veriff
  verificationSessionId String? @map("verification_session_id")
  verificationResult    Json?   @map("verification_result")

  // Metadata
  rejectionReason String?   @map("rejection_reason")
  reviewedBy      String?   @map("reviewed_by")
  reviewedAt      DateTime? @map("reviewed_at")
  expiresAt       DateTime? @map("expires_at") // KYC expira ap√≥s 2 anos

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  seller MarketplaceSellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("marketplace_seller_kyc")
  @@schema("fitos")
}

model MarketplaceKYCDocument {
  id    String @id @default(cuid())
  kycId String @map("kyc_id")

  type   String // 'rg_front', 'rg_back', 'cnh', 'selfie', 'address_proof', 'bank_proof', 'contract'
  url    String
  status String @default("pending") // pending, approved, rejected

  extractedData Json? @map("extracted_data") // OCR data

  uploadedAt DateTime  @default(now()) @map("uploaded_at")
  reviewedAt DateTime? @map("reviewed_at")

  @@map("marketplace_kyc_documents")
  @@schema("fitos")
}

model MarketplaceKYCLog {
  id    String @id @default(cuid())
  kycId String @map("kyc_id")

  event       String // 'document_uploaded', 'verification_started', 'approved', 'rejected'
  description String
  metadata    Json   @default("{}")

  createdBy String?  @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([kycId, createdAt])
  @@map("marketplace_kyc_logs")
  @@schema("fitos")
}

// Shipping Models
model MarketplaceShipment {
  id      String @id @default(cuid())
  orderId String @unique @map("order_id")

  // Transportadora
  carrier     String // correios, fedex, dhl, jadlog, etc
  serviceType String? @map("service_type") // PAC, SEDEX, Express, etc

  // Rastreamento
  trackingCode String  @map("tracking_code")
  trackingUrl  String? @map("tracking_url")

  // Status
  status          String  @default("pending") // pending, in_transit, out_for_delivery, delivered, failed, returned
  currentLocation String? @map("current_location")

  // Datas
  shippedAt         DateTime? @map("shipped_at")
  estimatedDelivery DateTime? @map("estimated_delivery")
  deliveredAt       DateTime? @map("delivered_at")

  // Detalhes
  weight     Float? // em kg
  dimensions Json? // {length, width, height} em cm

  // Custos
  shippingCost   Float  @map("shipping_cost")
  insuranceValue Float? @map("insurance_value")

  // Endere√ßo
  recipientName  String  @map("recipient_name")
  recipientPhone String? @map("recipient_phone")
  address        Json // endere√ßo completo

  // Etiqueta
  labelUrl     String? @map("label_url")
  labelPrinted Boolean @default(false) @map("label_printed")

  // Coleta
  pickupScheduled Boolean   @default(false) @map("pickup_scheduled")
  pickupDate      DateTime? @map("pickup_date")

  // Metadata
  metadata Json @default("{}")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order  MarketplaceOrder           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  events MarketplaceShipmentEvent[]

  @@index([trackingCode])
  @@index([status])
  @@map("marketplace_shipments")
  @@schema("fitos")
}

model MarketplaceShipmentEvent {
  id         String @id @default(cuid())
  shipmentId String @map("shipment_id")

  status      String
  description String
  location    String?

  occurredAt DateTime @map("occurred_at")
  createdAt  DateTime @default(now()) @map("created_at")

  shipment MarketplaceShipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId, occurredAt])
  @@map("marketplace_shipment_events")
  @@schema("fitos")
}

model MarketplaceCarrierConfig {
  id       String  @id @default(cuid())
  tenantId String? @map("tenant_id")

  carrier     String @unique // correios, fedex, dhl, jadlog, etc
  displayName String @map("display_name")

  isActive Boolean @default(true) @map("is_active")

  // Credenciais
  apiKey        String? @map("api_key")
  apiSecret     String? @map("api_secret")
  accountNumber String? @map("account_number")
  contractCode  String? @map("contract_code")

  // Configura√ß√µes
  config Json @default("{}")

  // Servi√ßos dispon√≠veis
  services Json @default("[]") // [{code, name, deliveryTime}]

  // Custos
  handlingFee Float @default(0) @map("handling_fee")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("marketplace_carrier_configs")
  @@schema("fitos")
}

// Diferenciais Competitivos Models
model MarketplaceTrial {
  id        String @id @default(cuid())
  listingId String @map("listing_id")
  userId    String @map("user_id")

  type      String // 'equipment_rental', 'sample', 'free_session', 'preview'
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")

  status String @default("active") // active, completed, converted_to_purchase, expired

  feedback String? // Feedback do usu√°rio sobre o trial
  rating   Int? // Avalia√ß√£o 1-5

  convertedToPurchase Boolean @default(false) @map("converted_to_purchase")
  orderId             String? @map("order_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("marketplace_trials")
  @@schema("fitos")
}

model MarketplaceProductAuthenticity {
  id        String @id @default(cuid())
  listingId String @map("listing_id")

  batchNumber      String @map("batch_number")
  manufacturerCode String @map("manufacturer_code")
  qrCode           String @unique @map("qr_code")

  isAuthentic Boolean   @default(false) @map("is_authentic")
  verifiedAt  DateTime? @map("verified_at")
  verifiedBy  String?   @map("verified_by") // manufacturer, admin

  expirationDate  DateTime @map("expiration_date")
  manufactureDate DateTime @map("manufacture_date")

  nftTokenId String? @map("nft_token_id") // Certificado NFT (opcional)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("marketplace_product_authenticity")
  @@schema("fitos")
}

model MarketplaceLiveSession {
  id     String @id @default(cuid())
  hostId String @map("host_id") // Vendedor ou influencer

  title        String
  description  String
  scheduledFor DateTime @map("scheduled_for")
  duration     Int // em minutos

  status String @default("scheduled") // scheduled, live, ended

  // Streaming
  streamUrl String? @map("stream_url")
  streamKey String? @map("stream_key")

  // M√©tricas
  viewerCount Int   @default(0) @map("viewer_count")
  peakViewers Int   @default(0) @map("peak_viewers")
  totalSales  Float @default(0) @map("total_sales")
  ordersCount Int   @default(0) @map("orders_count")

  // Produtos em destaque
  featuredListings Json @default("[]") @map("featured_listings")

  // Ofertas exclusivas da live
  liveDiscounts Json @default("[]") @map("live_discounts")

  startedAt DateTime? @map("started_at")
  endedAt   DateTime? @map("ended_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("marketplace_live_sessions")
  @@schema("fitos")
}

model MarketplaceAmbassador {
  id     String @id @default(cuid())
  userId String @map("user_id")

  status String @default("pending") // pending, active, suspended

  // Transforma√ß√£o
  beforePhotos        Json   @default("[]") @map("before_photos")
  afterPhotos         Json   @default("[]") @map("after_photos")
  transformationStory String @map("transformation_story")

  // M√©tricas
  followersCount  Int   @default(0) @map("followers_count")
  totalSales      Float @default(0) @map("total_sales")
  totalCommission Float @default(0) @map("total_commission")
  conversionRate  Float @default(0) @map("conversion_rate")

  // Produtos que usa/recomenda
  favoriteProducts Json @default("[]") @map("favorite_products")

  // C√≥digo exclusivo
  ambassadorCode String @unique @map("ambassador_code")
  commissionRate Float  @default(15) @map("commission_rate") // 15% para embaixadores

  approvedAt DateTime? @map("approved_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  @@map("marketplace_ambassadors")
  @@schema("fitos")
}

model MarketplaceBundle {
  id        String @id @default(cuid())
  createdBy String @map("created_by") // vendedor ou sistema (IA)

  name        String
  description String
  goal        String // hypertrophy, weight_loss, endurance, etc

  // Produtos do bundle
  listings Json // Array de listing IDs

  // Pre√ßos
  totalPrice      Float @map("total_price")
  bundlePrice     Float @map("bundle_price")
  savings         Float // Economia
  discountPercent Float @map("discount_percent")

  // Valida√ß√£o cient√≠fica
  scientificProof Boolean @default(false) @map("scientific_proof")
  proofLinks      Json    @default("[]") @map("proof_links")

  // Resultados esperados
  estimatedResults String @map("estimated_results")
  successRate      Float? @map("success_rate") // % de usu√°rios que atingiram resultado

  // M√©tricas
  salesCount Int   @default(0) @map("sales_count")
  rating     Float @default(0)

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("marketplace_bundles")
  @@schema("fitos")
}

model MarketplaceWarranty {
  id      String @id @default(cuid())
  orderId String @map("order_id")

  type     String // 'extended', 'damage_protection', 'maintenance'
  duration Int // em meses
  price    Float

  coverageDetails Json @map("coverage_details")

  status String @default("active") // active, claimed, expired

  claimHistory Json @default("[]") @map("claim_history")

  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("marketplace_warranties")
  @@schema("fitos")
}

model MarketplaceSocialPost {
  id     String @id @default(cuid())
  userId String @map("user_id")

  type String // 'workout_video', 'review', 'recipe', 'transformation', 'tip'

  content String
  media   Json   @default("[]") // fotos e v√≠deos

  // Produtos mencionados
  taggedProducts Json @default("[]") @map("tagged_products")

  // Engajamento
  likesCount    Int @default(0) @map("likes_count")
  commentsCount Int @default(0) @map("comments_count")
  sharesCount   Int @default(0) @map("shares_count")

  // Monetiza√ß√£o
  isSponsored Boolean @default(false) @map("is_sponsored")
  sponsorId   String? @map("sponsor_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("marketplace_social_posts")
  @@schema("fitos")
}

// Dashboard Metrics Models
model MarketplaceBuyerMetrics {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")

  // M√©tricas gerais
  totalOrders       Int   @default(0) @map("total_orders")
  totalSpent        Float @default(0) @map("total_spent")
  averageOrderValue Float @default(0) @map("average_order_value")

  // Fidelidade
  fidelityPoints Int    @default(0) @map("fidelity_points")
  fidelityTier   String @default("bronze") @map("fidelity_tier")

  // Cashback
  cashbackEarned    Float @default(0) @map("cashback_earned")
  cashbackUsed      Float @default(0) @map("cashback_used")
  cashbackAvailable Float @default(0) @map("cashback_available")

  // Engajamento
  reviewsCount   Int @default(0) @map("reviews_count")
  favoritesCount Int @default(0) @map("favorites_count")
  followingCount Int @default(0) @map("following_count")

  // Comportamento
  lastOrderAt  DateTime? @map("last_order_at")
  firstOrderAt DateTime? @map("first_order_at")

  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("marketplace_buyer_metrics")
  @@schema("fitos")
}

model MarketplaceSellerMetrics {
  id       String @id @default(cuid())
  sellerId String @unique @map("seller_id")

  // Vendas
  totalSales        Int   @default(0) @map("total_sales")
  totalRevenue      Float @default(0) @map("total_revenue")
  averageOrderValue Float @default(0) @map("average_order_value")

  // Performance
  conversionRate     Float @default(0) @map("conversion_rate")
  responseRate       Float @default(0) @map("response_rate")
  onTimeDeliveryRate Float @default(0) @map("on_time_delivery_rate")

  // Reputa√ß√£o
  averageRating   Float @default(0) @map("average_rating")
  totalReviews    Int   @default(0) @map("total_reviews")
  positiveReviews Int   @default(0) @map("positive_reviews")
  negativeReviews Int   @default(0) @map("negative_reviews")

  // Produtos
  activeListings Int @default(0) @map("active_listings")
  totalListings  Int @default(0) @map("total_listings")

  // Financeiro
  availableBalance Float @default(0) @map("available_balance")
  pendingBalance   Float @default(0) @map("pending_balance")
  totalWithdrawn   Float @default(0) @map("total_withdrawn")
  totalFees        Float @default(0) @map("total_fees")

  // Engajamento
  followersCount Int @default(0) @map("followers_count")
  totalViews     Int @default(0) @map("total_views")

  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("marketplace_seller_metrics")
  @@schema("fitos")
}

// Sprint 5: Business Admin Models

model RevenueMetric {
  id                 String   @id @default(cuid())
  date               DateTime
  mrr                Float
  arr                Float
  churnRate          Float
  newRevenue         Float
  expansionRevenue   Float
  contractionRevenue Float
  metadata           Json     @default("{}")
  createdAt          DateTime @default(now()) @map("created_at")

  @@index([date])
  @@map("revenue_metrics")
  @@schema("fitos")
}

model CustomerHealthScore {
  id             String   @id @default(cuid())
  tenantId       String   @map("tenant_id")
  score          Float // 0-100
  usageScore     Float
  adoptionScore  Float
  supportScore   Float
  paymentScore   Float
  riskLevel      String // 'low', 'medium', 'high'
  lastCalculated DateTime @map("last_calculated")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, lastCalculated])
  @@map("customer_health_scores")
  @@schema("fitos")
}

model FeatureUsage {
  id          String   @id @default(cuid())
  tenantId    String   @map("tenant_id")
  userId      String   @map("user_id")
  featureName String   @map("feature_name")
  usageCount  Int      @default(1) @map("usage_count")
  lastUsed    DateTime @map("last_used")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId, featureName])
  @@index([userId, featureName])
  @@map("feature_usage")
  @@schema("fitos")
}

model AdminNotification {
  id        String   @id @default(cuid())
  type      String // 'churn_risk', 'payment_failed', 'milestone'
  title     String
  message   String
  priority  String // 'low', 'medium', 'high', 'critical'
  isRead    Boolean  @default(false) @map("is_read")
  actionUrl String?  @map("action_url")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([isRead, priority])
  @@map("admin_notifications")
  @@schema("fitos")
}

// ===========================================
// COST MANAGEMENT MODELS
// ===========================================

// Categorias de custos
model CostCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  icon        String
  color       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  services    CostService[]
  entries     CostEntry[]
  budgets     CostBudget[]
  goals       CostGoal[]
  
  @@map("cost_categories")
  @@schema("fitos")
}

// Servi√ßos dentro de cada categoria
model CostService {
  id          String   @id @default(cuid())
  categoryId  String
  name        String
  displayName String
  provider    String?
  icon        String?
  isActive    Boolean  @default(true)
  
  captureType String   @default("manual")
  costType    String   @default("variable") // "fixed" | "variable"
  apiConfig   Json?    @default("{}")
  pricingModel Json?   @default("{}")
  
  category    CostCategory @relation(fields: [categoryId], references: [id])
  entries     CostEntry[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([categoryId, name])
  @@map("cost_services")
  @@schema("fitos")
}

// Entradas de custos
model CostEntry {
  id          String   @id @default(cuid())
  categoryId  String
  serviceId   String
  tenantId    String?
  clientId    String?
  
  amount      Float
  currency    String   @default("BRL")
  
  date        DateTime @default(now())
  month       Int
  year        Int
  
  entryType   String   @default("manual")
  
  description String?
  tags        String[] @default([])
  metadata    Json?    @default("{}")
  
  revenueGenerated Float? // Para an√°lise de ROI
  
  category    CostCategory @relation(fields: [categoryId], references: [id])
  service     CostService @relation(fields: [serviceId], references: [id])
  
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([categoryId, year, month])
  @@index([serviceId, year, month])
  @@index([date])
  @@index([tags])
  @@map("cost_entries")
  @@schema("fitos")
}

// Or√ßamentos e limites
model CostBudget {
  id          String   @id @default(cuid())
  categoryId  String?
  
  monthlyLimit Float
  currency     String   @default("BRL")
  
  alertAt75   Boolean  @default(true)
  alertAt90   Boolean  @default(true)
  
  startDate   DateTime
  endDate     DateTime?
  
  isActive    Boolean  @default(true)
  
  category    CostCategory? @relation(fields: [categoryId], references: [id])
  alerts      CostAlert[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("cost_budgets")
  @@schema("fitos")
}


// Metas de redu√ß√£o de custos
model CostGoal {
  id          String   @id @default(cuid())
  categoryId  String?
  
  title       String
  targetReduction Float
  startDate   DateTime
  endDate     DateTime
  
  status      String   @default("active") // active, achieved, failed, cancelled
  currentProgress Float @default(0)
  
  category    CostCategory? @relation(fields: [categoryId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("cost_goals")
  @@schema("fitos")
}

// Aprova√ß√µes de custos altos
model CostApproval {
  id          String   @id @default(cuid())
  costEntryId String
  
  threshold   Float
  requestedBy String
  status      String   @default("pending") // pending, approved, rejected
  
  approvedBy  String?
  approvedAt  DateTime?
  rejectionReason String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("cost_approvals")
  @@schema("fitos")
}

// Relat√≥rios agendados
model ScheduledReport {
  id          String   @id @default(cuid())
  
  title       String
  frequency   String // daily, weekly, monthly
  recipients  String[] // emails
  format      String   @default("pdf") // pdf, csv, json
  
  filters     Json?    @default("{}")
  
  lastSentAt  DateTime?
  nextSendAt  DateTime
  
  isActive    Boolean  @default(true)
  
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("scheduled_reports")
  @@schema("fitos")
}
