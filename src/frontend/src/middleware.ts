/**
 * Middleware Next.js para Prote√ß√£o de Rotas - FitOS
 * 
 * Middleware para proteger rotas baseado em autentica√ß√£o e roles
 * Redireciona usu√°rios n√£o autenticados e verifica permiss√µes
 */

import { NextRequest, NextResponse } from 'next/server';
import { UserRole, DEFAULT_ROLE_REDIRECTS } from './types/auth-middleware';

// ============================================================================
// CONFIGURA√á√ïES DE ROTAS
// ============================================================================

// Rotas p√∫blicas (n√£o requerem autentica√ß√£o)
const PUBLIC_ROUTES = [
  '/',
  '/demo',
  '/auth/login',
  '/auth/signup',
  '/auth/forgot-password',
  '/auth/reset-password',
  '/api/health',
  '/_next',
  '/favicon.ico',
  '/manifest.json',
  '/sw.js',
  '/offline.html',
  '/robots.txt',
  '/sitemap.xml',
  // PWA assets
  '/icons/',
  '/screenshots/'
];

// Rotas de autentica√ß√£o (redirecionam se j√° autenticado)
const AUTH_ROUTES = [
  '/auth/login',
  '/auth/signup',
  '/auth/forgot-password',
  '/auth/reset-password'
];

// Rotas protegidas por role
const ROLE_PROTECTED_ROUTES: Record<string, UserRole[]> = {
  // Rotas do SUPER_ADMIN (acesso total)
  '/super-admin': ['SUPER_ADMIN'],
  '/empresas': ['SUPER_ADMIN'],
  '/users': ['SUPER_ADMIN'],
  '/clients': ['SUPER_ADMIN', 'OWNER', 'ADMIN', 'TRAINER'],
  '/exercises': ['SUPER_ADMIN', 'OWNER', 'ADMIN', 'TRAINER'],
  '/workouts': ['SUPER_ADMIN', 'OWNER', 'ADMIN', 'TRAINER'],
  '/plans': ['SUPER_ADMIN'],
  '/custom-plans': ['SUPER_ADMIN'],
  '/ai-agents': ['SUPER_ADMIN'],
  '/marketplace': ['SUPER_ADMIN'],
  '/wearables': ['SUPER_ADMIN'],
  '/analytics': ['SUPER_ADMIN', 'OWNER', 'ADMIN', 'TRAINER'],
  
  // Rotas do ADMIN (incluindo SUPER_ADMIN)
  '/admin': ['SUPER_ADMIN', 'OWNER', 'ADMIN'],
  
  // Rotas do TRAINER (incluindo SUPER_ADMIN)
  '/trainer': ['SUPER_ADMIN', 'OWNER', 'ADMIN', 'TRAINER'],
  
  // Rotas do CLIENT (todos podem acessar)
  '/dashboard': ['SUPER_ADMIN', 'OWNER', 'ADMIN', 'TRAINER', 'CLIENT'],
  '/client': ['SUPER_ADMIN', 'OWNER', 'ADMIN', 'TRAINER', 'CLIENT']
};

// ============================================================================
// FUN√á√ïES AUXILIARES
// ============================================================================

/**
 * Verifica se uma rota √© p√∫blica
 */
function isPublicRoute(pathname: string): boolean {
  return PUBLIC_ROUTES.some(route => {
    if (route === '/') return pathname === '/';
    return pathname.startsWith(route);
  });
}

/**
 * Verifica se uma rota √© de autentica√ß√£o
 */
function isAuthRoute(pathname: string): boolean {
  return AUTH_ROUTES.some(route => pathname.startsWith(route));
}

/**
 * Obt√©m a role necess√°ria para uma rota
 */
function getRequiredRole(pathname: string): UserRole[] | null {
  for (const [route, roles] of Object.entries(ROLE_PROTECTED_ROUTES)) {
    if (pathname.startsWith(route)) {
      return roles;
    }
  }
  return null;
}

/**
 * Verifica se o usu√°rio tem a role necess√°ria
 */
function hasRequiredRole(userRole: string, requiredRoles: UserRole[]): boolean {
  return requiredRoles.includes(userRole as UserRole);
}

/**
 * Obt√©m o caminho de redirecionamento baseado na role
 */
function getRedirectPathByRole(role: string): string {
  return DEFAULT_ROLE_REDIRECTS[role as keyof typeof DEFAULT_ROLE_REDIRECTS] || '/dashboard';
}

/**
 * Verifica se o token JWT √© v√°lido
 */
function isTokenValid(token: string): boolean {
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const now = Math.floor(Date.now() / 1000);
    const isValid = payload.exp > now;
    console.log('üîç Middleware - Verificando token:', {
      exp: payload.exp,
      now: now,
      isValid: isValid,
      expiresIn: payload.exp - now
    });
    return isValid;
  } catch (error) {
    console.log('‚ùå Middleware - Erro ao verificar token:', error);
    return false;
  }
}

/**
 * Obt√©m dados do usu√°rio do token
 */
function getUserFromToken(token: string): { role: string; tenantId: string } | null {
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    return {
      role: payload.role,
      tenantId: payload.tenantId
    };
  } catch {
    return null;
  }
}

// ============================================================================
// MIDDLEWARE PRINCIPAL
// ============================================================================

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  console.log('üîç Middleware - Rota:', pathname);
  
  // Permitir rotas p√∫blicas (otimiza√ß√£o: verifica√ß√£o r√°pida)
  if (isPublicRoute(pathname)) {
    console.log('‚úÖ Middleware - Rota p√∫blica, permitindo acesso');
    return NextResponse.next();
  }

  // Obter token de autentica√ß√£o (otimiza√ß√£o: verifica√ß√£o √∫nica)
  const token = request.cookies.get('accessToken')?.value || 
                request.headers.get('authorization')?.replace('Bearer ', '');
  
  console.log('üîë Middleware - Token encontrado:', token ? `${token.substring(0, 20)}...` : 'Nenhum');

  // Verificar se est√° em rota de autentica√ß√£o
  if (isAuthRoute(pathname)) {
    console.log('üîê Middleware - Rota de autentica√ß√£o');
    // Se tem token v√°lido, redirecionar para dashboard
    if (token && isTokenValid(token)) {
      const userData = getUserFromToken(token);
      if (userData) {
        const redirectPath = getRedirectPathByRole(userData.role);
        console.log('üîÑ Middleware - Redirecionando usu√°rio autenticado para:', redirectPath);
        return NextResponse.redirect(new URL(redirectPath, request.url));
      }
    }
    // Permitir acesso √†s rotas de auth
    console.log('‚úÖ Middleware - Permitindo acesso √† rota de auth');
    return NextResponse.next();
  }

  // Verificar autentica√ß√£o para rotas protegidas
  if (!token || !isTokenValid(token)) {
    console.log('‚ùå Middleware - Token inv√°lido ou ausente, redirecionando para login');
    // Redirecionar para login com returnUrl (otimiza√ß√£o: redirecionamento direto)
    const loginUrl = new URL('/auth/login', request.url);
    loginUrl.searchParams.set('from', pathname); // Usar 'from' em vez de 'returnUrl' para consist√™ncia
    return NextResponse.redirect(loginUrl);
  }

  // Obter dados do usu√°rio
  const userData = getUserFromToken(token);
  if (!userData) {
    console.log('‚ùå Middleware - Dados do usu√°rio inv√°lidos, redirecionando para login');
    // Token inv√°lido, redirecionar para login
    const loginUrl = new URL('/auth/login', request.url);
    loginUrl.searchParams.set('from', pathname);
    return NextResponse.redirect(loginUrl);
  }

  // Verificar permiss√µes por role
  const requiredRoles = getRequiredRole(pathname);
  
  // SUPER_ADMIN tem acesso total a todas as rotas
  if (userData.role === 'SUPER_ADMIN') {
    console.log('‚úÖ Middleware - SUPER_ADMIN, acesso total permitido');
    // SUPER_ADMIN pode acessar qualquer rota, n√£o precisa verificar permiss√µes
  } else if (requiredRoles && !hasRequiredRole(userData.role, requiredRoles)) {
    console.log('‚ùå Middleware - Usu√°rio n√£o tem permiss√£o para esta rota');
    // Usu√°rio n√£o tem permiss√£o, redirecionar para dashboard apropriado
    const redirectPath = getRedirectPathByRole(userData.role);
    return NextResponse.redirect(new URL(redirectPath, request.url));
  }

  console.log('‚úÖ Middleware - Acesso permitido para:', userData.role);
  // Adicionar headers com informa√ß√µes do usu√°rio (otimiza√ß√£o: apenas se necess√°rio)
  const response = NextResponse.next();
  response.headers.set('X-User-Role', userData.role);
  response.headers.set('X-Tenant-ID', userData.tenantId);

  return response;
}

// ============================================================================
// CONFIGURA√á√ÉO DO MIDDLEWARE
// ============================================================================

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!api|_next/static|_next/image|favicon.ico|public).*)',
  ],
};
