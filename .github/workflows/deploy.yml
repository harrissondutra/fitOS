name: FitOS - Dokploy CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dokploy'
        type: choice
        options:
          - dokploy
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: 'docker.io'
  APP_NAME: 'fitos'
  DOKPLOY_APP_NAME: 'fitos'

jobs:
  # ===========================================
  # JOB 1: VALIDATION & TESTING
  # ===========================================
  validate-and-test:
    name: 🔍 Validate & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - name: backend
            path: src/backend
            test-command: npm run test:coverage
          - name: frontend
            path: src/frontend
            test-command: npm run test:coverage
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fitos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd ${{ matrix.path }} && npm ci

      - name: 🔍 Lint ${{ matrix.name }}
        run: |
          cd ${{ matrix.path }}
          npm run lint || echo "Lint issues found in ${{ matrix.name }}"
          npm run lint:fix || echo "Some lint issues could not be auto-fixed"

      - name: 🏗️ Type Check ${{ matrix.name }}
        run: |
          cd ${{ matrix.path }}
          npm run type-check

      - name: 🧪 Run ${{ matrix.name }} Tests
        run: |
          cd ${{ matrix.path }}
          ${{ matrix.test-command }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fitos_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fitos_test

      - name: 📊 Upload Coverage Reports
        if: matrix.name == 'backend'
        uses: codecov/codecov-action@v3
        with:
          files: ./src/backend/coverage/lcov.info,./src/frontend/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📦 Upload Test Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.name }}-${{ github.sha }}
          path: |
            ${{ matrix.path }}/coverage/
            ${{ matrix.path }}/logs/
          retention-days: 7

  # ===========================================
  # JOB 2: SECURITY SCANNING
  # ===========================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-and-test
    if: always()

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Run Snyk Security Scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: 🔍 Audit Dependencies
        run: |
          echo "🔍 Running dependency audits..."
          npm audit --audit-level=high || echo "⚠️ High severity vulnerabilities found in root dependencies"
          cd src/backend && npm audit --audit-level=high || echo "⚠️ High severity vulnerabilities found in backend dependencies"
          cd ../frontend && npm audit --audit-level=high || echo "⚠️ High severity vulnerabilities found in frontend dependencies"
          echo "✅ Dependency audit completed"

  # ===========================================
  # JOB 3: BUILD & PUSH DOCKER
  # ===========================================
  build-and-push:
    name: 🐳 Build & Push Docker
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-and-test, security-scan]
    if: always() && (needs.validate-and-test.result == 'success' || github.event.inputs.force_deploy == 'true')

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: 🔐 Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}

      - name: 🏗️ Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=fitos
          cache-to: type=gha,mode=max,scope=fitos
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # ===========================================
  # JOB 4: NOTIFY DOKPLOY AUTO-DEPLOY
  # ===========================================
  notify-dokploy:
    name: 📢 Notify Dokploy Auto-Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-and-push]
    if: |
      always() && 
      (needs.build-and-push.result == 'success' || github.event.inputs.force_deploy == 'true') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dokploy')

    environment:
      name: dokploy

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📢 Notify Dokploy Auto-Deploy
        run: |
          echo "📢 Dokploy has auto-deploy enabled!"
          echo "🚀 Your push will trigger automatic deployment"
          echo "✅ No manual intervention needed"
          echo ""
          echo "📦 Docker Image: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}"
          echo "🌐 App URL: https://fitnessos.sistudo.com.br"
          echo ""
          echo "⏳ Dokploy will automatically:"
          echo "  - Pull the new Docker image"
          echo "  - Deploy the application"
          echo "  - Update the running containers"

      - name: 📊 Generate Dokploy Status Report
        run: |
          echo "## 🚀 Dokploy Auto-Deploy Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Dokploy (Auto-Deploy)" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Auto-Deploy Enabled" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://fitnessos.sistudo.com.br" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Dokploy will automatically deploy this push" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Dokploy Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- [Dokploy Documentation](https://docs.dokploy.com/docs/core)" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Compose Guide](https://docs.dokploy.com/docs/core/docker-compose)" >> $GITHUB_STEP_SUMMARY
          echo "- [Environment Variables](https://docs.dokploy.com/docs/core/environment-variables)" >> $GITHUB_STEP_SUMMARY

  # ===========================================
  # JOB 5: NOTIFICATION
  # ===========================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-and-test, security-scan, build-and-push, notify-dokploy]
    if: always()
    continue-on-error: true

    steps:
      - name: 📊 Generate Summary
        run: |
          echo "## 🎯 FitOS Dokploy Auto-Deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Validate & Test:** ${{ needs.validate-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build & Push:** ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Notify Dokploy:** ${{ needs.notify-dokploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "${{ needs.validate-and-test.result }}" == "success" && 
                "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "### 🎉 Overall Status: ✅ SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "### 🚀 Deployment: Dokploy will auto-deploy" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Check failed jobs above" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Dokploy Auto-Deploy:" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image:** ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App URL:** https://fitnessos.sistudo.com.br" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Auto-deploy enabled in Dokploy" >> $GITHUB_STEP_SUMMARY
          echo "- **Note:** No manual intervention needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Dokploy Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- [Dokploy Documentation](https://docs.dokploy.com/docs/core)" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Compose Guide](https://docs.dokploy.com/docs/core/docker-compose)" >> $GITHUB_STEP_SUMMARY
          echo "- [Environment Variables](https://docs.dokploy.com/docs/core/environment-variables)" >> $GITHUB_STEP_SUMMARY
