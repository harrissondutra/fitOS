---
alwaysApply: true
description: Padrões de documentação, JSDoc, README e guias de uso
---

# Documentação

## Propósito

Estabelecer padrões de documentação para garantir código bem documentado, APIs documentadas e guias de uso claros.

## Regras Obrigatórias

### ✅ SEMPRE Fazer

- README.md sempre atualizado
- JSDoc para funções públicas
- Comentários inline para lógica complexa
- Documentação de APIs com Swagger
- Changelog para releases
- Guias em `/docs` para funcionalidades principais
- Scripts documentados no package.json
- Types e interfaces documentados
- Exemplos de uso em documentação

### ❌ NUNCA Fazer

- NÃO deixar documentação desatualizada
- NÃO omitir exemplos de uso
- NÃO documentar coisas óbvias
- NÃO esquecer de documentar APIs públicas

## Padrões e Exemplos

### JSDoc para Funções

```typescript
// ✅ Documentação JSDoc completa
/**
 * Cria um novo usuário no sistema
 * 
 * @param data - Dados do usuário a ser criado
 * @param tenantId - ID do tenant para isolamento multi-tenant
 * @returns Promise com o usuário criado
 * @throws {ValidationError} Se os dados forem inválidos
 * @throws {ConflictError} Se o email já existir
 * @throws {PlanLimitError} Se exceder limite do plano
 * 
 * @example
 * ```typescript
 * const user = await createUser({
 *   email: 'user@example.com',
 *   name: 'John Doe',
 *   password: 'securepassword'
 * }, 'tenant-123');
 * ```
 */
async function createUser(data: CreateUserDto, tenantId: string): Promise<User> {
  // Validar tenant
  const tenant = await validateTenant(tenantId);
  
  // Verificar limite do plano
  await checkPlanLimit(tenantId, 'users');
  
  // Criar usuário
  const user = await prisma.user.create({
    data: {
      ...data,
      tenantId
    }
  });
  
  return user;
}

// ✅ Interface documentada
/**
 * Dados do usuário para criação
 */
interface CreateUserDto {
  /** Email do usuário (obrigatório, único) */
  email: string;
  /** Nome completo do usuário (obrigatório) */
  name: string;
  /** Senha do usuário (mínimo 8 caracteres) */
  password: string;
  /** Role do usuário (default: 'user') */
  role?: 'admin' | 'user' | 'member';
}
```

### README Atualizado

```markdown
# FitOS - Fitness Operating System

Sistema completo de gestão de academias com IA integrada.

## Instalação

```bash
npm install
npm run setup:dev
npm run dev
```

## Scripts Disponíveis

- `npm run dev` - Iniciar desenvolvimento
- `npm run build` - Build para produção
- `npm run test` - Executar testes
- `npm run lint` - Linting

## Documentação

- [Desenvolvimento Local](docs/DESENVOLVIMENTO_LOCAL.md)
- [API Documentation](docs/API.md)
- [Deploy Guide](docs/DEPLOY.md)
```

### Swagger Documentation

```typescript
// ✅ Documentação Swagger para API
/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - id
 *         - email
 *         - name
 *         - tenantId
 *       properties:
 *         id:
 *           type: string
 *           description: ID único do usuário
 *         email:
 *           type: string
 *           format: email
 *           description: Email do usuário
 *         name:
 *           type: string
 *           description: Nome completo
 *         tenantId:
 *           type: string
 *           description: ID do tenant
 */
router.get('/users/:id',
  authMiddleware,
  tenantMiddleware,
  async (req, res) => {
    const user = await userService.getUserById(req.params.id, req.tenantId);
    res.json({ success: true, data: user });
  }
);
```

### Comentários Inline

```typescript
// ✅ Comentários para lógica complexa
async function calculatePlanLimits(tenantId: string): Promise<PlanLimits> {
  const tenant = await prisma.tenant.findUnique({
    where: { id: tenantId },
    include: { plan: true }
  });

  // Calcular uso atual
  const currentUsage = {
    users: await prisma.user.count({ where: { tenantId } }),
    clients: await prisma.member.count({ where: { tenantId } }),
    storage: await calculateStorage(tenantId)
  };

  // Comparar com limites do plano
  const plan = await plansConfig.getPlanById(tenant!.planId);
  
  // -1 significa ilimitado
  const limits = {
    users: plan!.limits.users === -1 ? Infinity : plan!.limits.users,
    clients: plan!.limits.clients === -1 ? Infinity : plan!.limits.clients,
    storage: plan!.limits.storage === -1 ? Infinity : plan!.limits.storage
  };

  return {
    currentUsage,
    limits,
    remaining: {
      users: limits.users - currentUsage.users,
      clients: limits.clients - currentUsage.clients,
      storage: limits.storage - currentUsage.storage
    }
  };
}
```

### Changelog

```markdown
# Changelog

## [1.2.0] - 2024-01-15

### Added
- Sistema de billing com Stripe
- Dashboard de analytics
- Multi-language support

### Fixed
- Bug na validação de JWT
- Performance issues no cache Redis

### Changed
- Atualização de dependências
- Melhoria na UI do dashboard

## [1.1.0] - 2024-01-01

### Added
- CRUD de usuários
- Sistema de autenticação
```

### Scripts Documentados

```json
// ✅ package.json com scripts documentados
{
  "scripts": {
    "dev": "Iniciar desenvolvimento (frontend + backend)",
    "dev:backend": "Apenas backend na porta 3001",
    "dev:frontend": "Apenas frontend na porta 3000",
    "build": "Build completo para produção",
    "test": "Executar testes unitários e integração",
    "test:e2e": "Executar testes E2E com Playwright",
    "lint": "Verificar qualidade de código",
    "migrate:dev": "Aplicar migrações em desenvolvimento",
    "migrate:prod": "Aplicar migrações em produção (NUNCA usar reset)",
    "db:backup": "Criar backup do banco de dados",
    "db:safe-migrate": "Migração segura com backup automático"
  }
}
```

## Exceções

- Funções internas muito simples podem ter JSDoc mínimo
- Variáveis locais não precisam documentação

## Verificação

- ✅ README atualizado
- ✅ JSDoc em funções públicas
- ✅ Swagger documentation completa
- ✅ Scripts documentados
- ✅ Changelog mantido

## Recursos Relacionados

- [Code Style](./code-style.mdc)
- [API Design](./api-design.mdc)
- [Backend Patterns](./backend-patterns.mdc)
