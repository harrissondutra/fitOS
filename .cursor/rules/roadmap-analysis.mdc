---
alwaysApply: true
description: An√°lise de roadmap e planejamento de sprints para o FitOS
---

# An√°lise de Roadmap e Planejamento de Sprints

## üìã Prop√≥sito

Esta regra estabelece que **SEMPRE** ao iniciar qualquer task relacionada a implementa√ß√£o ou planejamento, o AI deve:

1. **Analisar o arquivo [ROADMAP_FITOS_DEFINITIVO.md](mdc:docs/ROADMAP_FITOS_DEFINITIVO.md)**
2. **Verificar o status atual do projeto** (qual sprint est√°)
3. **Identificar tarefas pendentes** da sprint atual
4. **Planejar pr√≥ximos passos** baseados no roadmap
5. **Gerar funcionalidades espec√≠ficas** alinhadas com o roadmap

## üéØ Roadmap Definitivo

O arquivo `docs/ROADMAP_FITOS_DEFINITIVO.md` cont√©m todo o plano de implementa√ß√£o do FitOS, incluindo:

### **Ciclo 1: MVP SaaS + CI/CD (Semanas 1-12)**

#### **Sprint 1: Setup CI/CD + Multi-Tenancy (Semanas 1-3)**
- Git workflow e GitHub Actions
- Arquitetura multi-tenant
- Setup de testes automatizados

#### **Sprint 2: Billing + Deploy Autom√°tico (Semanas 4-6)**
- Integrar Stripe para assinaturas recorrentes
- Integrar Mercado Pago para PIX e pagamentos BR
- Implementar self-service onboarding
- Configurar deploy autom√°tico para produ√ß√£o

#### **Sprint 3: IA Multiagente + Limites (Semanas 7-9)**
- Implementar agentes de IA especializados (Coach, Nutrition, Business)
- Sistema de limites por plano
- Integra√ß√£o com wearables

#### **Sprint 4: Integra√ß√£o Nutricional + Marketplace + Bioimped√¢ncia + Agendamento + CRM (Semanas 10-12)**
- Dashboard para nutricionistas
- Marketplace de servi√ßos nutricionais
- Sistema de agendamento completo
- Integra√ß√£o com Google Agenda
- Hist√≥rico e relat√≥rios de agendamentos
- Sistema de Bioimped√¢ncia com CRUD completo
- AI Analysis Agent para composi√ß√£o corporal
- Integra√ß√£o com equipamentos de bioimped√¢ncia
- **Implementar CRM integrado para profissionais**
- **Dashboard de pipeline de clientes**
- **Sistema de automa√ß√£o de follow-ups**
- **Campanhas autom√°ticas personaliz√°veis**
- **AI CRM Analytics Agent**

#### **Sprint 5: Admin Dashboard + Deploy Final (Semanas 13-15)**
- Dashboard administrativo completo
- Deploy final para produ√ß√£o
- Monitoramento e observabilidade
- Documenta√ß√£o final

## ‚úÖ SEMPRE Fazer

### Ao Iniciar Qualquer Task de Implementa√ß√£o:

1. **Ler o roadmap completo** do arquivo `docs/ROADMAP_FITOS_DEFINITIVO.md`
2. **Identificar a sprint atual** verificando o que j√° foi implementado
3. **Listar tarefas pendentes** da sprint atual
4. **Priorizar tarefas** baseado nas depend√™ncias e import√¢ncia
5. **Gerar plano espec√≠fico** com sub-tarefas t√©cnicas
6. **Verificar integra√ß√£o** com funcionalidades j√° existentes
7. **Seguir padr√µes de c√≥digo** definidos nas regras existentes
8. **Implementar testando** cada componente individualmente

### Ao Implementar Funcionalidades:

1. **Verificar documento de roadmap** antes de come√ßar
2. **Identificar na qual sprint a funcionalidade se encaixa**
3. **Checar depend√™ncias** (funcionalidades que devem ser implementadas antes)
4. **Seguir a estrutura** definida no roadmap (services, routes, componentes)
5. **Manter consist√™ncia** com funcionalidades j√° implementadas
6. **Documentar o progresso** ap√≥s cada milestone

### Ao Criar Novas Funcionalidades:

1. **Consultar o roadmap** para entender o contexto
2. **Verificar se a funcionalidade est√° planejada** em alguma sprint
3. **Se n√£o estiver planejada**, avaliar impacto no roadmap existente
4. **Seguir os padr√µes arquiteturais** definidos (multi-tenant, AI agents, etc)
5. **Implementar testes** autom√°ticos (Jest + Playwright)
6. **Documentar a funcionalidade** seguindo padr√µes JSDoc

## üìä Exemplo de An√°lise de Roadmap

```typescript
// ‚úÖ Ao iniciar uma task, o AI deve:

// 1. Verificar status atual
const currentStatus = checkRoadmapStatus();
console.log(`Sprint atual: ${currentStatus.sprint}`);
console.log(`Semana: ${currentStatus.week}`);
console.log(`Tarefas conclu√≠das: ${currentStatus.completed}`);
console.log(`Tarefas pendentes: ${currentStatus.pending}`);

// 2. Identificar pr√≥ximas tarefas
const nextTasks = getNextTasksFromRoadmap(currentStatus.sprint);
nextTasks.forEach(task => {
  console.log(`- [ ] ${task.name}`);
  console.log(`  Depend√™ncias: ${task.dependencies}`);
  console.log(`  Escopo: ${task.scope}`);
});

// 3. Criar plano de implementa√ß√£o
const implementationPlan = createImplementationPlan(nextTasks);
```

## üîç Checklist de An√°lise de Roadmap

Ao iniciar qualquer implementa√ß√£o, verificar:

- [ ] ‚úÖ Li o roadmap completo (`docs/ROADMAP_FITOS_DEFINITIVO.md`)
- [ ] ‚úÖ Identifiquei a sprint atual do projeto
- [ ] ‚úÖ Liste todas as tarefas da sprint atual
- [ ] ‚úÖ Marquei tarefas j√° implementadas
- [ ] ‚úÖ Identifiquei tarefas pendentes priorit√°rias
- [ ] ‚úÖ Verifiquei depend√™ncias entre tarefas
- [ ] ‚úÖ Criei plano de implementa√ß√£o espec√≠fico
- [ ] ‚úÖ Consultei padr√µes de c√≥digo nas regras existentes
- [ ] ‚úÖ Verifiquei integra√ß√£o com funcionalidades existentes

## üìù Estrutura de An√°lise de Sprint

```markdown
## Sprint X: [Nome da Sprint]

### Tarefas Implementadas ‚úÖ
- Tarefa 1
- Tarefa 2

### Tarefas Pendentes üîÑ
- Tarefa 3 (Prioridade Alta)
- Tarefa 4 (Prioridade M√©dia)

### Pr√≥ximos Passos üéØ
1. Implementar Tarefa 3
2. Testar integra√ß√£o
3. Implementar Tarefa 4
```

## üöÄ Gera√ß√£o de Funcionalidades

### Processo de Gera√ß√£o:

1. **Identificar funcionalidade** no roadmap
2. **Verificar escopo** (backend, frontend, ambos)
3. **Criar estrutura** seguindo padr√µes:
   - Backend: `services`, `routes`, `models`, `middleware`
   - Frontend: `components`, `pages`, `hooks`, `store`
4. **Implementar testes** (unit√°rios + E2E)
5. **Documentar** (JSDoc + README)
6. **Integrar** com funcionalidades existentes

### Exemplo de Gera√ß√£o:

```typescript
// ‚úÖ AI deve gerar estrutura completa

// 1. Criar service
// src/backend/src/services/nova-funcionalidade.service.ts
export class NovaFuncionalidadeService {
  async criar(data: Dados, tenantId: string) {
    // Implementar l√≥gica
  }
}

// 2. Criar routes
// src/backend/src/routes/nova-funcionalidade.routes.ts
router.post('/nova-funcionalidade', async (req, res) => {
  const result = await service.criar(req.body, req.tenantId);
  res.json(result);
});

// 3. Criar componente frontend
// src/frontend/components/nova-funcionalidade.tsx
export function NovaFuncionalidade() {
  // UI
}
```

## üîó Integra√ß√£o com Outras Regras

Esta regra deve ser consultada **junto** com:

- [database.mdc](mdc:.cursor/rules/database.mdc) - Para opera√ß√µes de banco
- [backend-patterns.mdc](mdc:.cursor/rules/backend-patterns.mdc) - Para padr√µes backend
- [frontend-patterns.mdc](mdc:.cursor/rules/frontend-patterns.mdc) - Para padr√µes frontend
- [api-design.mdc](mdc:.cursor/rules/api-design.mdc) - Para design de APIs
- [multi-tenant.mdc](mdc:.cursor/rules/multi-tenant.mdc) - Para multi-tenancy
- [security.mdc](mdc:.cursor/rules/security.mdc) - Para seguran√ßa

## üìö Recursos

- [Roadmap Completo](docs/ROADMAP_FITOS_DEFINITIVO.md)
- [Arquitetura](docs/ARQUITETURA_REFATORADA.md)
- [Diretrizes do Projeto](docs/DIRETRIZES_PROJETO.md)

## ‚ö†Ô∏è Importante

**NUNCA inicie uma implementa√ß√£o sem consultar o roadmap!**

Sempre verifique:
1. Se a funcionalidade est√° planejada
2. Quais depend√™ncias existem
3. Qual sprint pertence
4. Padr√µes a seguir
