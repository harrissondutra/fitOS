---
alwaysApply: true
description: Padrões de UI/UX, mobile-first design, acessibilidade e feedback visual
---

# Interface e Experiência do Usuário

## Propósito

Estabelecer padrões de UI/UX para garantir interfaces consistentes, acessíveis e responsivas.

## Regras Obrigatórias

### ✅ SEMPRE Fazer

- Mobile-first design em todos os componentes
- Responsivo em todos os breakpoints (mobile, tablet, desktop)
- Loading states em todas as ações assíncronas
- Error boundaries para captura de erros de renderização
- Toast notifications para feedback de ações
- Skeleton loaders durante carregamento
- Acessibilidade (ARIA labels, keyboard navigation)
- Animações sutis com Framer Motion
- Estados vazios informativos
- Estados de erro amigáveis

### ❌ NUNCA Fazer

- NÃO omitir loading states
- NÃO esquecer de tratar erros visualmente
- NÃO criar interfaces sem responsividade mobile
- NÃO ignorar acessibilidade (WCAG 2.1 AA mínimo)
- NÃO usar animações excessivas
- NÃO ocultar erros do usuário

## Padrões e Exemplos

### Mobile-First Design

```typescript
// ✅ Tailwind CSS mobile-first
<div className="
  p-4              // Mobile: padding 16px
  md:p-6           // Tablet: padding 24px
  lg:p-8           // Desktop: padding 32px
  grid
  grid-cols-1      // Mobile: 1 coluna
  md:grid-cols-2   // Tablet: 2 colunas
  lg:grid-cols-3   // Desktop: 3 colunas
  gap-4
  md:gap-6
">
  {/* Conteúdo */}
</div>
```

### Loading States

```typescript
// ✅ Loading states com Skeleton
import { Skeleton } from '@/components/ui/skeleton';

export function UsersList() {
  const { users, isLoading } = useUsers();
  
  if (isLoading) {
    return (
      <div className="space-y-4">
        <Skeleton className="h-12 w-full" />
        <Skeleton className="h-12 w-full" />
        <Skeleton className="h-12 w-full" />
      </div>
    );
  }
  
  return (
    <div>
      {users.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  );
}

// ✅ Button com loading state
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';

export function SubmitButton({ isLoading }) {
  return (
    <Button disabled={isLoading}>
      {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
      {isLoading ? 'Salvando...' : 'Salvar'}
    </Button>
  );
}
```

### Error Boundaries

```typescript
// ✅ Error Boundary para React
'use client';

import { Component, ErrorInfo, ReactNode } from 'react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <Alert variant="destructive">
          <AlertTitle>Algo deu errado</AlertTitle>
          <AlertDescription>
            Por favor, recarregue a página.
          </AlertDescription>
        </Alert>
      );
    }

    return this.props.children;
  }
}

// Uso
<ErrorBoundary>
  <YourComponent />
</ErrorBoundary>
```

### Toast Notifications

```typescript
// ✅ React Hot Toast para feedback
import { toast } from 'react-hot-toast';

export function useUserActions() {
  const createUser = async (data: CreateUserDto) => {
    try {
      await api.post('/users', data);
      toast.success('Usuário criado com sucesso!');
    } catch (error) {
      toast.error('Erro ao criar usuário');
    }
  };

  const deleteUser = async (id: string) => {
    try {
      await api.delete(`/users/${id}`);
      toast.success('Usuário deletado com sucesso!');
    } catch (error) {
      toast.error('Erro ao deletar usuário');
    }
  };

  return { createUser, deleteUser };
}

// ✅ Uso
const { createUser } = useUserActions();
await createUser(formData);
```

### Estados Vazios

```typescript
// ✅ Estado vazio informativo
import { AlertCircle } from 'lucide-react';

export function EmptyState({ message, description }) {
  return (
    <div className="flex flex-col items-center justify-center p-12 text-center">
      <AlertCircle className="h-12 w-12 text-muted-foreground mb-4" />
      <h3 className="text-lg font-semibold">{message}</h3>
      <p className="text-sm text-muted-foreground">{description}</p>
    </div>
  );
}

// Uso
{users.length === 0 ? (
  <EmptyState
    message="Nenhum usuário encontrado"
    description="Comece criando seu primeiro usuário"
  />
) : (
  <UsersList users={users} />
)}
```

### Estados de Erro

```typescript
// ✅ Tratar erros amigavelmente
export function UsersList() {
  const { users, isLoading, error } = useUsers();
  
  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Erro</AlertTitle>
        <AlertDescription>
          Não foi possível carregar os usuários.
          <Button
            variant="link"
            onClick={() => window.location.reload()}
          >
            Tentar novamente
          </Button>
        </AlertDescription>
      </Alert>
    );
  }
  
  if (isLoading) {
    return <SkeletonList />;
  }
  
  return <UsersGrid users={users} />;
}
```

### Acessibilidade

```typescript
// ✅ ARIA labels e keyboard navigation
<button
  onClick={handleClick}
  onKeyDown={(e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      handleClick();
    }
  }}
  aria-label="Adicionar usuário"
  aria-describedby="add-user-description"
>
  <Plus className="h-5 w-5" />
</button>

<p id="add-user-description" className="sr-only">
  Clique ou pressione Enter para adicionar um novo usuário
</p>

// ✅ Form labels
<Label htmlFor="email">Email</Label>
<Input id="email" type="email" aria-required="true" />

// ✅ Estados de loading
<div role="status" aria-live="polite" aria-busy={isLoading}>
  {isLoading ? 'Carregando...' : 'Concluído'}
</div>
```

### Animações Sutis

```typescript
// ✅ Framer Motion para animações
import { motion } from 'framer-motion';

export function AnimatedCard({ children }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      {children}
    </motion.div>
  );
}

// ✅ Variantes de animação
const fadeIn = {
  initial: { opacity: 0 },
  animate: { opacity: 1 },
  exit: { opacity: 0 },
  transition: { duration: 0.2 }
};
```

### Responsividade Completa

```typescript
// ✅ Componente responsivo
export function Dashboard() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      <Card className="col-span-1 md:col-span-2 lg:col-span-1">
        <CardHeader>
          <CardTitle>Dashboard</CardTitle>
        </CardHeader>
        <CardContent>
          {/* Conteúdo */}
        </CardContent>
      </Card>
    </div>
  );
}

// ✅ Sidebar responsiva
<Sheet>
  <SheetContent side="left">
    {/* Menu mobile */}
  </SheetContent>
</Sheet>
```

## Exceções

- Componentes internos podem ter menos foco em UX
- Alguns componentes podem pular animações se afetarem performance

## Verificação

- ✅ Loading states em todas ações
- ✅ Error boundaries implementados
- ✅ Responsivo em todos breakpoints
- ✅ Acessibilidade WCAG 2.1 AA
- ✅ Feedback visual em todas ações
- ✅ Estados vazios e de erro tratados

## Recursos Relacionados

- [Frontend Patterns](./frontend-patterns.mdc)
- [Error Handling](./error-handling.mdc)
- [ShadcnUI Guide](docs/SHADCN-GUIDE.md)
