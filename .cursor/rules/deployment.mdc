---
alwaysApply: true
description: Padr√µes de deploy, ambientes, processos de produ√ß√£o e rollback
---

# Deploy e Produ√ß√£o

## Prop√≥sito

Estabelecer padr√µes rigorosos para deploy em produ√ß√£o, garantindo seguran√ßa, estabilidade e facilidade de rollback.

## Regras Obrigat√≥rias

### ‚úÖ SEMPRE Fazer

- **SEMPRE** usar `env.prod` antes de fazer push (deploy autom√°tico)
- Executar `npm run setup:dev` para desenvolvimento local
- Usar `npm run env:prod` antes de push para produ√ß√£o
- Git push ‚Üí produ√ß√£o autom√°tica (Dockploy/Coolify)
- Pre-push hook valida configura√ß√µes automaticamente
- Health checks obrigat√≥rios ap√≥s deploy
- Backup antes de cada deploy
- Rollback autom√°tico em caso de falha
- Migra√ß√µes apenas com `npm run migrate:prod` em produ√ß√£o
- Monitorar logs ap√≥s deploy
- Verificar se ambiente est√° correto antes de opera√ß√µes

### ‚ùå NUNCA Fazer

- NUNCA editar `.env` diretamente durante desenvolvimento (usar `env.development`)
- NUNCA fazer push sem validar configura√ß√µes
- NUNCA fazer deploy direto sem testes
- NUNCA omitir backup antes de mudan√ßas
- NUNCA fazer deploy em hor√°rios de pico sem comunica√ß√£o
- NUNCA ignorar health checks falhos
- NUNCA fazer force push em `main` ou `develop`

## Padr√µes e Exemplos

### Fluxo de Desenvolvimento

```bash
# ‚úÖ Fluxo seguro de desenvolvimento

# 1. Configurar ambiente de desenvolvimento
npm run setup:dev

# 2. Desenvolver localmente
npm run dev

# 3. Fazer altera√ß√µes no c√≥digo
# ... desenvolver ...

# 4. Testar localmente
npm run test

# 5. Voltar para produ√ß√£o ANTES do push
npm run env:prod

# 6. Verificar configura√ß√µes
npm run env:show

# 7. Commit e push (deploy autom√°tico)
git add .
git commit -m "feat: nova funcionalidade"
git push origin main
```

### Scripts de Ambiente

```json
// ‚úÖ package.json scripts
{
  "scripts": {
    "setup:dev": "node scripts/setup-dev.js",
    "env:prod": "node scripts/generate-dockploy-env.js",
    "env:dev": "node scripts/set-env.js development",
    "env:show": "echo 'Current environment:' && head -5 .env",
    "pre-push": "node scripts/pre-push.js"
  }
}
```

### Pre-Push Hook (Autom√°tico)

```typescript
// ‚úÖ scripts/pre-push.js
const fs = require('fs');
const path = require('path');

function checkEnvironment() {
  const envPath = path.join(__dirname, '../.env');
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå .env file not found');
    process.exit(1);
  }

  const envContent = fs.readFileSync(envPath, 'utf-8');
  
  // Verificar se NODE_ENV=production
  if (!envContent.includes('NODE_ENV=production')) {
    console.error('‚ùå NODE_ENV is not set to production');
    console.log('üîß Running env:prod to fix...');
    // Executar env:prod
    require('child_process').execSync('npm run env:prod', { stdio: 'inherit' });
  }

  // Verificar se URLs apontam para produ√ß√£o
  const dbUrl = envContent.match(/DATABASE_URL=([^\n]+)/)?.[1];
  if (!dbUrl || !dbUrl.includes('production')) {
    console.error('‚ùå Database URL does not point to production');
    process.exit(1);
  }

  console.log('‚úÖ Environment check passed');
}

checkEnvironment();
```

### Deploy Autom√°tico (Dockploy)

```yaml
# ‚úÖ .github/workflows/deploy.yml
name: Deploy to Dockploy

on:
  push:
    branches: [main, develop]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run test
      - run: npm run lint
  
  deploy:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Build
      - name: Build
        run: |
          npm install
          npm run build
      
      # Deploy to Dockploy
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DOCKPLOY_HOST }}
          username: ${{ secrets.DOCKPLOY_USER }}
          key: ${{ secrets.DOCKPLOY_SSH_KEY }}
          script: |
            cd /opt/fitos
            git pull origin main
            npm run migrate:prod
            docker-compose up -d --build
```

### Health Checks

```typescript
// ‚úÖ Health check endpoint
// routes/health.routes.ts
import { Router, Request, Response } from 'express';

const router = Router();

router.get('/health', async (req: Request, res: Response) => {
  try {
    // Verificar conex√£o com banco
    await prisma.$queryRaw`SELECT 1`;
    
    // Verificar Redis
    await redis.ping();
    
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      database: 'connected',
      cache: 'connected'
    });
  } catch (error) {
    res.status(503).json({
      status: 'unhealthy',
      error: error.message
    });
  }
});

export default router;

// ‚úÖ Verifica√ß√£o ap√≥s deploy
// Deve retornar 200
curl https://api.fitos.com/api/health
```

### Migra√ß√µes em Produ√ß√£o

```bash
# ‚úÖ Processo seguro de migra√ß√£o em produ√ß√£o

# 1. Backup obrigat√≥rio
npm run db:backup

# 2. Verificar migra√ß√£o pendente
npx prisma migrate status

# 3. Aplicar migra√ß√£o (usa migrate deploy, n√£o dev)
npm run migrate:prod

# 4. Verificar se aplicou corretamente
npx prisma migrate status

# 5. Health check
curl https://api.fitos.com/api/health
```

### Rollback Autom√°tico

```typescript
// ‚úÖ Script de rollback
// scripts/rollback.js
const { execSync } = require('child_process');

function rollback() {
  try {
    console.log('üîÑ Starting rollback...');
    
    // 1. Parar aplica√ß√£o
    execSync('docker-compose down', { stdio: 'inherit' });
    
    // 2. Reverter c√≥digo
    execSync('git revert HEAD', { stdio: 'inherit' });
    execSync('git push origin main', { stdio: 'inherit' });
    
    // 3. Restaurar backup do banco
    const backups = execSync('ls -t backups/ | head -1', { encoding: 'utf-8' });
    execSync(`npm run db:restore backups/${backups.trim()}`, { stdio: 'inherit' });
    
    // 4. Iniciar aplica√ß√£o
    execSync('docker-compose up -d', { stdio: 'inherit' });
    
    console.log('‚úÖ Rollback completed successfully');
  } catch (error) {
    console.error('‚ùå Rollback failed:', error);
    process.exit(1);
  }
}

rollback();
```

### Monitoramento P√≥s-Deploy

```bash
# ‚úÖ Verificar logs ap√≥s deploy
docker-compose logs -f

# ‚úÖ Verificar health check
curl https://api.fitos.com/api/health

# ‚úÖ Verificar m√©tricas
# - Response time
# - Error rate
# - Memory usage
# - CPU usage

# ‚úÖ Monitorar por 5-10 minutos ap√≥s deploy
```

## Comandos de Ambiente

```bash
# ‚úÖ Desenvolvimento
npm run setup:dev    # Configurar ambiente dev
npm run dev          # Iniciar desenvolvimento
npm run env:show     # Ver ambiente atual

# ‚úÖ Antes do Push (Obrigat√≥rio)
npm run env:prod     # Configurar para produ√ß√£o
npm run pre-push      # Verificar configura√ß√µes

# ‚úÖ Produ√ß√£o
git push origin main  # Deploy autom√°tico

# ‚úÖ P√≥s-Deploy
curl https://api.fitos.com/api/health
docker-compose logs -f
```

## Checklist de Deploy

```bash
# ‚úÖ Checklist OBRIGAT√ìRIO antes de push

- [ ] C√≥digo testado localmente
- [ ] Testes passando (npm run test)
- [ ] Lint sem erros (npm run lint)
- [ ] Ambiente de produ√ß√£o configurado (npm run env:prod)
- [ ] Backup do banco criado (se houver migra√ß√µes)
- [ ] Health check funcionando
- [ ] Comunica√ß√£o com equipe sobre deploy
- [ ] Hor√°rio apropriado (evitar hor√°rio de pico)
```

## Exce√ß√µes

- Hotfixes urgentes podem pular alguns testes, mas devem ser monitorados de perto
- Deploys em staging podem ter processos mais flex√≠veis

## Verifica√ß√£o

- ‚úÖ Pre-push hook validando ambiente
- ‚úÖ Health checks p√≥s-deploy
- ‚úÖ Backup antes de mudan√ßas
- ‚úÖ Rollback autom√°tico configurado
- ‚úÖ Monitoramento ativo

## Recursos Relacionados

- [Fluxo de Trabalho](docs/FLUXO_TRABALHO.md)
- [Diretrizes Projeto](docs/DIRETRIZES_PROJETO.md)
- [Prote√ß√£o Dados Produ√ß√£o](docs/PROTECAO_DADOS_PRODUCAO.md)
- [CI/CD Pipeline](docs/CI_CD_PIPELINE.md)
- [Database](./database.mdc)
