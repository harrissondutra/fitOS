---
alwaysApply: true
description: Padrões de arquitetura, estrutura monorepo, multi-tenancy e organização de código
---

# Arquitetura e Estrutura do Projeto

## Propósito

Estabelecer padrões de arquitetura para o projeto FitOS, garantindo uma estrutura monorepo bem organizada, separação de responsabilidades e suporte multi-tenant robusto.

## Regras Obrigatórias

### ✅ SEMPRE Fazer

- Manter estrutura monorepo com separação clara: `src/backend`, `src/frontend`, `src/shared`
- Usar alias TypeScript (@/, @/backend/*, @/frontend/*) para imports limpos
- Incluir `tenantId` em todas as queries de banco multi-tenant
- Organizar código por domínio/funcionalidade, não por tipo de arquivo
- Centralizar configurações compartilhadas na raiz (`auth.ts`, `tsconfig.json`)
- Manter arquivo único `.env` na raiz do projeto
- Separar lógica de negócio (services) de controllers/routes
- Usar camadas: routes → controllers → services → repositories

### ❌ NUNCA Fazer

- NÃO duplicar código entre backend e frontend (usar `src/shared`)
- NÃO misturar responsabilidades (UI com lógica de negócio)
- NÃO criar pastas por tipo (`components`, `utils`, etc.) em escopo amplo
- NÃO omitir `tenantId` em queries multi-tenant
- NÃO criar múltiplos arquivos `.env` (usar apenas na raiz)
- NÃO colocar scripts ou docs na raiz do projeto
- NÃO exportar diretamente do `index.ts` (usar exportações nomeadas)

## Estrutura Padrão do Projeto

```
fitOS/
├── .env                    # ÚNICO arquivo de configuração
├── auth.ts                 # Configuração compartilhada Better Auth
├── tsconfig.json          # Configuração base TypeScript
├── package.json           # Workspace principal
├── src/
│   ├── backend/           # API Backend (Express + TypeScript)
│   │   ├── src/
│   │   │   ├── config/    # Configurações centralizadas
│   │   │   ├── routes/    # Rotas da API
│   │   │   ├── services/  # Lógica de negócio
│   │   │   ├── models/    # Modelos de dados
│   │   │   ├── middleware/ # Middlewares
│   │   │   ├── utils/     # Utilitários
│   │   │   ├── types/     # Tipos TypeScript
│   │   │   └── index.ts   # Entry point
│   │   ├── prisma/        # Schema do banco de dados
│   │   └── package.json
│   ├── frontend/          # Frontend (Next.js + React)
│   │   ├── src/
│   │   │   ├── app/       # Páginas (App Router)
│   │   │   ├── components/# Componentes React
│   │   │   ├── lib/       # Utilitários e helpers
│   │   │   ├── hooks/     # Custom hooks
│   │   │   ├── store/     # State management (Zustand)
│   │   │   ├── types/     # Tipos TypeScript
│   │   │   └── middleware.ts
│   │   └── package.json
│   └── shared/             # Código compartilhado
│       ├── types/          # Tipos compartilhados
│       └── utils/          # Utilitários compartilhados
├── scripts/                # Scripts de desenvolvimento
│   ├── setup-dev.js
│   └── pre-push.js
├── docs/                   # Documentação
└── tests/                  # Testes E2E
```

## Padrões e Exemplos

### TypeScript Path Aliases

```typescript
// tsconfig.json (raiz)
{
  "paths": {
    "@/*": ["./src/*"],
    "@/backend/*": ["./src/backend/src/*"],
    "@/frontend/*": ["./src/frontend/src/*"],
    "@/shared/*": ["./src/shared/*"]
  }
}

// ✅ Correto - Usar alias
import { UserService } from "@/backend/services/user.service";
import { Button } from "@/frontend/components/ui/button";

// ❌ Incorreto - Imports relativos longos
import { UserService } from "../../../../../backend/services/user.service";
```

### Organização por Funcionalidade (Backend)

```typescript
// src/backend/src/
├── users/
│   ├── user.routes.ts      # Rotas
│   ├── user.service.ts    # Lógica de negócio
│   ├── user.model.ts      # Modelo
│   └── user.types.ts      # Tipos
├── workouts/
│   ├── workout.routes.ts
│   ├── workout.service.ts
│   └── workout.model.ts
└── shared/
    ├── middleware/         # Middlewares reutilizáveis
    ├── utils/             # Utilitários
    └── types/             # Tipos globais
```

### Multi-Tenancy Pattern

```typescript
// ✅ SEMPRE incluir tenantId em queries
async function getUserById(userId: string, tenantId: string) {
  return await prisma.user.findFirst({
    where: {
      id: userId,
      tenantId: tenantId  // OBRIGATÓRIO
    }
  });
}

// ❌ NUNCA fazer queries sem tenantId
async function getUserById(userId: string) {
  return await prisma.user.findUnique({
    where: { id: userId }  // PERIGOSO - pode vazar dados entre tenants
  });
}
```

### Separação de Responsabilidades

```typescript
// services/user.service.ts - Lógica de negócio
export class UserService {
  async createUser(data: CreateUserDto, tenantId: string): Promise<User> {
    // Validação
    // Regras de negócio
    // Persistência
    return await prisma.user.create({
      data: { ...data, tenantId }
    });
  }
}

// routes/user.routes.ts - Apenas roteamento
router.post('/users', 
  authMiddleware,
  tenantMiddleware,
  validateCreateUser,
  async (req, res) => {
    const user = await userService.createUser(req.body, req.tenantId);
    res.json(user);
  }
);

// ❌ NÃO misturar
router.post('/users', async (req, res) => {
  // Lógica de negócio aqui é ERRADO
  const user = await prisma.user.create({ data: req.body });
  res.json(user);
});
```

### Configurações Compartilhadas (Raiz)

```typescript
// auth.ts (raiz) - Configuração Better Auth compartilhada
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  baseURL: process.env.BETTER_AUTH_BASE_URL,
  secret: process.env.BETTER_AUTH_SECRET,
  // ...
});

// src/backend/src/middleware/auth.middleware.ts
import { auth } from "../../../../auth";  // Importar da raiz

// src/frontend/src/app/api/auth/[...auth]/route.ts
import { auth } from "../../../../../auth";  // Importar da raiz
```

### Frontend: App Router Structure

```typescript
// src/frontend/src/app/
├── (auth)/
│   ├── login/
│   │   └── page.tsx
│   └── register/
│       └── page.tsx
├── (dashboard)/
│   ├── dashboard/
│   │   └── page.tsx
│   └── layout.tsx
├── api/
│   └── auth/
│       └── [...auth]/
│           └── route.ts
└── layout.tsx
```

## Exceções

- Tipos genéricos compartilhados entre frontend/backend podem ficar em `src/shared/types/`
- Utilitários puramente backend podem ficar em `src/backend/src/utils/`
- Configurações específicas de ambiente ficam no respectivo `package.json`

## Verificação

- ✅ Não há imports relativos que ultrapassem 2 níveis (`../../`)
- ✅ Todas as queries multi-tenant incluem `tenantId`
- ✅ Não há duplicação de código entre backend/frontend
- ✅ Separação clara entre routes, services e models
- ✅ Arquivo único `.env` na raiz

## Recursos Relacionados

- [DIRETRIZES_PROJETO.md](docs/DIRETRIZES_PROJETO.md)
- [ARQUITETURA_REFATORADA.md](docs/ARQUITETURA_REFATORADA.md)
- [Multi-Tenancy](./multi-tenant.mdc)
- [Backend Patterns](./backend-patterns.mdc)
- [Frontend Patterns](./frontend-patterns.mdc)
